// ----------------------------------------------------------------------------------
// Microsoft Developer & Platform Evangelism
// 
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
// EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
// OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
// ----------------------------------------------------------------------------------
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
// ----------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SlEventManager
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using SlEventManager.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace SlEventManager.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using SlEventManager.Web.Resources;
    
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SlEventManager.Web")]
    public sealed partial class Attendee : Entity
    {
        
        private Guid _aspNetUserId;
        
        private EntityCollection<AttendeeEvent> _attendeeEvents;
        
        private int _attendeeID;
        
        private EntityCollection<AttendeeScheduleTalk> _attendeeScheduleTalks;
        
        private byte[] _userPicture;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAspNetUserIdChanging(Guid value);
        partial void OnAspNetUserIdChanged();
        partial void OnAttendeeIDChanging(int value);
        partial void OnAttendeeIDChanged();
        partial void OnUserPictureChanging(byte[] value);
        partial void OnUserPictureChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Attendee()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        public Guid AspNetUserId
        {
            get
            {
                return this._aspNetUserId;
            }
            set
            {
                if ((this._aspNetUserId != value))
                {
                    this.OnAspNetUserIdChanging(value);
                    this.RaiseDataMemberChanging("AspNetUserId");
                    this.ValidateProperty("AspNetUserId", value);
                    this._aspNetUserId = value;
                    this.RaiseDataMemberChanged("AspNetUserId");
                    this.OnAspNetUserIdChanged();
                }
            }
        }
        
        [Association("Attendee_AttendeeEvent", "AttendeeID", "AttendeeID")]
        [XmlIgnore()]
        public EntityCollection<AttendeeEvent> AttendeeEvents
        {
            get
            {
                if ((this._attendeeEvents == null))
                {
                    this._attendeeEvents = new EntityCollection<AttendeeEvent>(this, "AttendeeEvents", this.FilterAttendeeEvents, this.AttachAttendeeEvents, this.DetachAttendeeEvents);
                }
                return this._attendeeEvents;
            }
        }
        
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int AttendeeID
        {
            get
            {
                return this._attendeeID;
            }
            set
            {
                if ((this._attendeeID != value))
                {
                    this.OnAttendeeIDChanging(value);
                    this.RaiseDataMemberChanging("AttendeeID");
                    this.ValidateProperty("AttendeeID", value);
                    this._attendeeID = value;
                    this.RaiseDataMemberChanged("AttendeeID");
                    this.OnAttendeeIDChanged();
                }
            }
        }
        
        [Association("Attendee_AttendeeScheduleTalk", "AttendeeID", "AttendeeID")]
        [XmlIgnore()]
        public EntityCollection<AttendeeScheduleTalk> AttendeeScheduleTalks
        {
            get
            {
                if ((this._attendeeScheduleTalks == null))
                {
                    this._attendeeScheduleTalks = new EntityCollection<AttendeeScheduleTalk>(this, "AttendeeScheduleTalks", this.FilterAttendeeScheduleTalks, this.AttachAttendeeScheduleTalks, this.DetachAttendeeScheduleTalks);
                }
                return this._attendeeScheduleTalks;
            }
        }
        
        [DataMember()]
        public byte[] UserPicture
        {
            get
            {
                return this._userPicture;
            }
            set
            {
                if ((this._userPicture != value))
                {
                    this.OnUserPictureChanging(value);
                    this.RaiseDataMemberChanging("UserPicture");
                    this.ValidateProperty("UserPicture", value);
                    this._userPicture = value;
                    this.RaiseDataMemberChanged("UserPicture");
                    this.OnUserPictureChanged();
                }
            }
        }
        
        private void AttachAttendeeEvents(AttendeeEvent entity)
        {
            entity.Attendee = this;
        }
        
        private void DetachAttendeeEvents(AttendeeEvent entity)
        {
            entity.Attendee = null;
        }
        
        private bool FilterAttendeeEvents(AttendeeEvent entity)
        {
            return (entity.AttendeeID == this.AttendeeID);
        }
        
        private void AttachAttendeeScheduleTalks(AttendeeScheduleTalk entity)
        {
            entity.Attendee = this;
        }
        
        private void DetachAttendeeScheduleTalks(AttendeeScheduleTalk entity)
        {
            entity.Attendee = null;
        }
        
        private bool FilterAttendeeScheduleTalks(AttendeeScheduleTalk entity)
        {
            return (entity.AttendeeID == this.AttendeeID);
        }
        
        public override object GetIdentity()
        {
            return this._attendeeID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SlEventManager.Web")]
    public sealed partial class AttendeeEvent : Entity
    {
        
        private EntityRef<Attendee> _attendee;
        
        private int _attendeeEventID;
        
        private int _attendeeID;
        
        private EntityRef<Event> _event;
        
        private int _eventID;
        
        private bool _isAcknowledged;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendeeEventIDChanging(int value);
        partial void OnAttendeeEventIDChanged();
        partial void OnAttendeeIDChanging(int value);
        partial void OnAttendeeIDChanged();
        partial void OnEventIDChanging(int value);
        partial void OnEventIDChanged();
        partial void OnIsAcknowledgedChanging(bool value);
        partial void OnIsAcknowledgedChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public AttendeeEvent()
        {
            this.OnCreated();
        }
        
        [Association("Attendee_AttendeeEvent", "AttendeeID", "AttendeeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Attendee Attendee
        {
            get
            {
                if ((this._attendee == null))
                {
                    this._attendee = new EntityRef<Attendee>(this, "Attendee", this.FilterAttendee);
                }
                return this._attendee.Entity;
            }
            set
            {
                Attendee previous = this.Attendee;
                if ((previous != value))
                {
                    this.ValidateProperty("Attendee", value);
                    if ((previous != null))
                    {
                        this._attendee.Entity = null;
                        previous.AttendeeEvents.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AttendeeID = value.AttendeeID;
                    }
                    else
                    {
                        this.AttendeeID = default(int);
                    }
                    this._attendee.Entity = value;
                    if ((value != null))
                    {
                        value.AttendeeEvents.Add(this);
                    }
                    this.RaisePropertyChanged("Attendee");
                }
            }
        }
        
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int AttendeeEventID
        {
            get
            {
                return this._attendeeEventID;
            }
            set
            {
                if ((this._attendeeEventID != value))
                {
                    this.OnAttendeeEventIDChanging(value);
                    this.RaiseDataMemberChanging("AttendeeEventID");
                    this.ValidateProperty("AttendeeEventID", value);
                    this._attendeeEventID = value;
                    this.RaiseDataMemberChanged("AttendeeEventID");
                    this.OnAttendeeEventIDChanged();
                }
            }
        }
        
        [DataMember()]
        public int AttendeeID
        {
            get
            {
                return this._attendeeID;
            }
            set
            {
                if ((this._attendeeID != value))
                {
                    this.OnAttendeeIDChanging(value);
                    this.RaiseDataMemberChanging("AttendeeID");
                    this.ValidateProperty("AttendeeID", value);
                    this._attendeeID = value;
                    this.RaiseDataMemberChanged("AttendeeID");
                    this.OnAttendeeIDChanged();
                }
            }
        }
        
        [Association("Event_AttendeeEvent", "EventID", "EventID", IsForeignKey=true)]
        [XmlIgnore()]
        public Event Event
        {
            get
            {
                if ((this._event == null))
                {
                    this._event = new EntityRef<Event>(this, "Event", this.FilterEvent);
                }
                return this._event.Entity;
            }
            set
            {
                Event previous = this.Event;
                if ((previous != value))
                {
                    this.ValidateProperty("Event", value);
                    if ((previous != null))
                    {
                        this._event.Entity = null;
                        previous.AttendeeEvents.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EventID = value.EventID;
                    }
                    else
                    {
                        this.EventID = default(int);
                    }
                    this._event.Entity = value;
                    if ((value != null))
                    {
                        value.AttendeeEvents.Add(this);
                    }
                    this.RaisePropertyChanged("Event");
                }
            }
        }
        
        [DataMember()]
        public int EventID
        {
            get
            {
                return this._eventID;
            }
            set
            {
                if ((this._eventID != value))
                {
                    this.OnEventIDChanging(value);
                    this.RaiseDataMemberChanging("EventID");
                    this.ValidateProperty("EventID", value);
                    this._eventID = value;
                    this.RaiseDataMemberChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }
        
        [DataMember()]
        public bool IsAcknowledged
        {
            get
            {
                return this._isAcknowledged;
            }
            set
            {
                if ((this._isAcknowledged != value))
                {
                    this.OnIsAcknowledgedChanging(value);
                    this.RaiseDataMemberChanging("IsAcknowledged");
                    this.ValidateProperty("IsAcknowledged", value);
                    this._isAcknowledged = value;
                    this.RaiseDataMemberChanged("IsAcknowledged");
                    this.OnIsAcknowledgedChanged();
                }
            }
        }
        
        private bool FilterAttendee(Attendee entity)
        {
            return (entity.AttendeeID == this.AttendeeID);
        }
        
        private bool FilterEvent(Event entity)
        {
            return (entity.EventID == this.EventID);
        }
        
        public override object GetIdentity()
        {
            return this._attendeeEventID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SlEventManager.Web")]
    public sealed partial class AttendeeScheduleTalk : Entity
    {
        
        private EntityRef<Attendee> _attendee;
        
        private int _attendeeID;
        
        private int _attendeeScheduleTalkID;
        
        private EntityRef<Talk> _talk;
        
        private int _talkID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAttendeeIDChanging(int value);
        partial void OnAttendeeIDChanged();
        partial void OnAttendeeScheduleTalkIDChanging(int value);
        partial void OnAttendeeScheduleTalkIDChanged();
        partial void OnTalkIDChanging(int value);
        partial void OnTalkIDChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public AttendeeScheduleTalk()
        {
            this.OnCreated();
        }
        
        [Association("Attendee_AttendeeScheduleTalk", "AttendeeID", "AttendeeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Attendee Attendee
        {
            get
            {
                if ((this._attendee == null))
                {
                    this._attendee = new EntityRef<Attendee>(this, "Attendee", this.FilterAttendee);
                }
                return this._attendee.Entity;
            }
            set
            {
                Attendee previous = this.Attendee;
                if ((previous != value))
                {
                    this.ValidateProperty("Attendee", value);
                    if ((previous != null))
                    {
                        this._attendee.Entity = null;
                        previous.AttendeeScheduleTalks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AttendeeID = value.AttendeeID;
                    }
                    else
                    {
                        this.AttendeeID = default(int);
                    }
                    this._attendee.Entity = value;
                    if ((value != null))
                    {
                        value.AttendeeScheduleTalks.Add(this);
                    }
                    this.RaisePropertyChanged("Attendee");
                }
            }
        }
        
        [DataMember()]
        public int AttendeeID
        {
            get
            {
                return this._attendeeID;
            }
            set
            {
                if ((this._attendeeID != value))
                {
                    this.OnAttendeeIDChanging(value);
                    this.RaiseDataMemberChanging("AttendeeID");
                    this.ValidateProperty("AttendeeID", value);
                    this._attendeeID = value;
                    this.RaiseDataMemberChanged("AttendeeID");
                    this.OnAttendeeIDChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int AttendeeScheduleTalkID
        {
            get
            {
                return this._attendeeScheduleTalkID;
            }
            set
            {
                if ((this._attendeeScheduleTalkID != value))
                {
                    this.OnAttendeeScheduleTalkIDChanging(value);
                    this.RaiseDataMemberChanging("AttendeeScheduleTalkID");
                    this.ValidateProperty("AttendeeScheduleTalkID", value);
                    this._attendeeScheduleTalkID = value;
                    this.RaiseDataMemberChanged("AttendeeScheduleTalkID");
                    this.OnAttendeeScheduleTalkIDChanged();
                }
            }
        }
        
        [Association("Talk_AttendeeScheduleTalk", "TalkID", "TalkID", IsForeignKey=true)]
        [XmlIgnore()]
        public Talk Talk
        {
            get
            {
                if ((this._talk == null))
                {
                    this._talk = new EntityRef<Talk>(this, "Talk", this.FilterTalk);
                }
                return this._talk.Entity;
            }
            set
            {
                Talk previous = this.Talk;
                if ((previous != value))
                {
                    this.ValidateProperty("Talk", value);
                    if ((previous != null))
                    {
                        this._talk.Entity = null;
                        previous.AttendeeScheduleTalks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TalkID = value.TalkID;
                    }
                    else
                    {
                        this.TalkID = default(int);
                    }
                    this._talk.Entity = value;
                    if ((value != null))
                    {
                        value.AttendeeScheduleTalks.Add(this);
                    }
                    this.RaisePropertyChanged("Talk");
                }
            }
        }
        
        [DataMember()]
        public int TalkID
        {
            get
            {
                return this._talkID;
            }
            set
            {
                if ((this._talkID != value))
                {
                    this.OnTalkIDChanging(value);
                    this.RaiseDataMemberChanging("TalkID");
                    this.ValidateProperty("TalkID", value);
                    this._talkID = value;
                    this.RaiseDataMemberChanged("TalkID");
                    this.OnTalkIDChanged();
                }
            }
        }
        
        private bool FilterAttendee(Attendee entity)
        {
            return (entity.AttendeeID == this.AttendeeID);
        }
        
        private bool FilterTalk(Talk entity)
        {
            return (entity.TalkID == this.TalkID);
        }
        
        public override object GetIdentity()
        {
            return this._attendeeScheduleTalkID;
        }
    }
    
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("SlEventManager-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The AuthenticationService data service URI.
        /// </param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetUser'.
        /// </summary>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'Login'.
        /// </summary>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'Logout'.
        /// </summary>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            QueryResult<User> EndLogin(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            QueryResult<User> EndLogout(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SlEventManager.Web")]
    public sealed partial class Event : Entity
    {
        
        private EntityCollection<AttendeeEvent> _attendeeEvents;
        
        private string _eventDescription;
        
        private DateTime _eventEndDate;
        
        private int _eventID;
        
        private DateTime _eventStartDate;
        
        private string _eventTitle;
        
        private EntityCollection<EventTrack> _eventTracks;
        
        private string _eventVenueName;
        
        private bool _isLive;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEventDescriptionChanging(string value);
        partial void OnEventDescriptionChanged();
        partial void OnEventEndDateChanging(DateTime value);
        partial void OnEventEndDateChanged();
        partial void OnEventIDChanging(int value);
        partial void OnEventIDChanged();
        partial void OnEventStartDateChanging(DateTime value);
        partial void OnEventStartDateChanged();
        partial void OnEventTitleChanging(string value);
        partial void OnEventTitleChanged();
        partial void OnEventVenueNameChanging(string value);
        partial void OnEventVenueNameChanged();
        partial void OnIsLiveChanging(bool value);
        partial void OnIsLiveChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Event()
        {
            this.OnCreated();
        }
        
        [Association("Event_AttendeeEvent", "EventID", "EventID")]
        [XmlIgnore()]
        public EntityCollection<AttendeeEvent> AttendeeEvents
        {
            get
            {
                if ((this._attendeeEvents == null))
                {
                    this._attendeeEvents = new EntityCollection<AttendeeEvent>(this, "AttendeeEvents", this.FilterAttendeeEvents, this.AttachAttendeeEvents, this.DetachAttendeeEvents);
                }
                return this._attendeeEvents;
            }
        }
        
        [DataMember()]
        [Required(AllowEmptyStrings=true)]
        public string EventDescription
        {
            get
            {
                return this._eventDescription;
            }
            set
            {
                if ((this._eventDescription != value))
                {
                    this.OnEventDescriptionChanging(value);
                    this.RaiseDataMemberChanging("EventDescription");
                    this.ValidateProperty("EventDescription", value);
                    this._eventDescription = value;
                    this.RaiseDataMemberChanged("EventDescription");
                    this.OnEventDescriptionChanged();
                }
            }
        }
        
        [DataMember()]
        public DateTime EventEndDate
        {
            get
            {
                return this._eventEndDate;
            }
            set
            {
                if ((this._eventEndDate != value))
                {
                    this.OnEventEndDateChanging(value);
                    this.RaiseDataMemberChanging("EventEndDate");
                    this.ValidateProperty("EventEndDate", value);
                    this._eventEndDate = value;
                    this.RaiseDataMemberChanged("EventEndDate");
                    this.OnEventEndDateChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int EventID
        {
            get
            {
                return this._eventID;
            }
            set
            {
                if ((this._eventID != value))
                {
                    this.OnEventIDChanging(value);
                    this.RaiseDataMemberChanging("EventID");
                    this.ValidateProperty("EventID", value);
                    this._eventID = value;
                    this.RaiseDataMemberChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }
        
        [DataMember()]
        public DateTime EventStartDate
        {
            get
            {
                return this._eventStartDate;
            }
            set
            {
                if ((this._eventStartDate != value))
                {
                    this.OnEventStartDateChanging(value);
                    this.RaiseDataMemberChanging("EventStartDate");
                    this.ValidateProperty("EventStartDate", value);
                    this._eventStartDate = value;
                    this.RaiseDataMemberChanged("EventStartDate");
                    this.OnEventStartDateChanged();
                }
            }
        }
        
        [DataMember()]
        [Required(AllowEmptyStrings=true)]
        [StringLength(50)]
        public string EventTitle
        {
            get
            {
                return this._eventTitle;
            }
            set
            {
                if ((this._eventTitle != value))
                {
                    this.OnEventTitleChanging(value);
                    this.RaiseDataMemberChanging("EventTitle");
                    this.ValidateProperty("EventTitle", value);
                    this._eventTitle = value;
                    this.RaiseDataMemberChanged("EventTitle");
                    this.OnEventTitleChanged();
                }
            }
        }
        
        [Association("Event_EventTrack", "EventID", "EventID")]
        [XmlIgnore()]
        public EntityCollection<EventTrack> EventTracks
        {
            get
            {
                if ((this._eventTracks == null))
                {
                    this._eventTracks = new EntityCollection<EventTrack>(this, "EventTracks", this.FilterEventTracks, this.AttachEventTracks, this.DetachEventTracks);
                }
                return this._eventTracks;
            }
        }
        
        [DataMember()]
        [Required(AllowEmptyStrings=true)]
        [StringLength(100)]
        public string EventVenueName
        {
            get
            {
                return this._eventVenueName;
            }
            set
            {
                if ((this._eventVenueName != value))
                {
                    this.OnEventVenueNameChanging(value);
                    this.RaiseDataMemberChanging("EventVenueName");
                    this.ValidateProperty("EventVenueName", value);
                    this._eventVenueName = value;
                    this.RaiseDataMemberChanged("EventVenueName");
                    this.OnEventVenueNameChanged();
                }
            }
        }
        
        [DataMember()]
        public bool IsLive
        {
            get
            {
                return this._isLive;
            }
            set
            {
                if ((this._isLive != value))
                {
                    this.OnIsLiveChanging(value);
                    this.RaiseDataMemberChanging("IsLive");
                    this.ValidateProperty("IsLive", value);
                    this._isLive = value;
                    this.RaiseDataMemberChanged("IsLive");
                    this.OnIsLiveChanged();
                }
            }
        }
        
        private void AttachAttendeeEvents(AttendeeEvent entity)
        {
            entity.Event = this;
        }
        
        private void DetachAttendeeEvents(AttendeeEvent entity)
        {
            entity.Event = null;
        }
        
        private bool FilterAttendeeEvents(AttendeeEvent entity)
        {
            return (entity.EventID == this.EventID);
        }
        
        private void AttachEventTracks(EventTrack entity)
        {
            entity.Event = this;
        }
        
        private void DetachEventTracks(EventTrack entity)
        {
            entity.Event = null;
        }
        
        private bool FilterEventTracks(EventTrack entity)
        {
            return (entity.EventID == this.EventID);
        }
        
        public override object GetIdentity()
        {
            return this._eventID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SlEventManager.Web")]
    public sealed partial class EventTrack : Entity
    {
        
        private EntityRef<Event> _event;
        
        private int _eventID;
        
        private int _eventTrackID;
        
        private string _eventTrackTitle;
        
        private EntityCollection<Talk> _talks;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEventIDChanging(int value);
        partial void OnEventIDChanged();
        partial void OnEventTrackIDChanging(int value);
        partial void OnEventTrackIDChanged();
        partial void OnEventTrackTitleChanging(string value);
        partial void OnEventTrackTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public EventTrack()
        {
            this.OnCreated();
        }
        
        [Association("Event_EventTrack", "EventID", "EventID", IsForeignKey=true)]
        [XmlIgnore()]
        public Event Event
        {
            get
            {
                if ((this._event == null))
                {
                    this._event = new EntityRef<Event>(this, "Event", this.FilterEvent);
                }
                return this._event.Entity;
            }
            set
            {
                Event previous = this.Event;
                if ((previous != value))
                {
                    this.ValidateProperty("Event", value);
                    if ((previous != null))
                    {
                        this._event.Entity = null;
                        previous.EventTracks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EventID = value.EventID;
                    }
                    else
                    {
                        this.EventID = default(int);
                    }
                    this._event.Entity = value;
                    if ((value != null))
                    {
                        value.EventTracks.Add(this);
                    }
                    this.RaisePropertyChanged("Event");
                }
            }
        }
        
        [DataMember()]
        public int EventID
        {
            get
            {
                return this._eventID;
            }
            set
            {
                if ((this._eventID != value))
                {
                    this.OnEventIDChanging(value);
                    this.RaiseDataMemberChanging("EventID");
                    this.ValidateProperty("EventID", value);
                    this._eventID = value;
                    this.RaiseDataMemberChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int EventTrackID
        {
            get
            {
                return this._eventTrackID;
            }
            set
            {
                if ((this._eventTrackID != value))
                {
                    this.OnEventTrackIDChanging(value);
                    this.RaiseDataMemberChanging("EventTrackID");
                    this.ValidateProperty("EventTrackID", value);
                    this._eventTrackID = value;
                    this.RaiseDataMemberChanged("EventTrackID");
                    this.OnEventTrackIDChanged();
                }
            }
        }
        
        [DataMember()]
        [Required(AllowEmptyStrings=true)]
        [StringLength(50)]
        public string EventTrackTitle
        {
            get
            {
                return this._eventTrackTitle;
            }
            set
            {
                if ((this._eventTrackTitle != value))
                {
                    this.OnEventTrackTitleChanging(value);
                    this.RaiseDataMemberChanging("EventTrackTitle");
                    this.ValidateProperty("EventTrackTitle", value);
                    this._eventTrackTitle = value;
                    this.RaiseDataMemberChanged("EventTrackTitle");
                    this.OnEventTrackTitleChanged();
                }
            }
        }
        
        [Association("EventTrack_Talk", "EventTrackID", "EventTrackID")]
        [XmlIgnore()]
        public EntityCollection<Talk> Talks
        {
            get
            {
                if ((this._talks == null))
                {
                    this._talks = new EntityCollection<Talk>(this, "Talks", this.FilterTalks, this.AttachTalks, this.DetachTalks);
                }
                return this._talks;
            }
        }
        
        private bool FilterEvent(Event entity)
        {
            return (entity.EventID == this.EventID);
        }
        
        private void AttachTalks(Talk entity)
        {
            entity.EventTrack = this;
        }
        
        private void DetachTalks(Talk entity)
        {
            entity.EventTrack = null;
        }
        
        private bool FilterTalks(Talk entity)
        {
            return (entity.EventTrackID == this.EventTrackID);
        }
        
        public override object GetIdentity()
        {
            return this._eventTrackID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SlEventManager.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _password;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Description="PasswordDescription", Name="PasswordLabel", Order=3, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ErrorResources), MinimumLength=7)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SlEventManager.Web")]
    public sealed partial class Talk : Entity
    {
        
        private EntityCollection<AttendeeScheduleTalk> _attendeeScheduleTalks;
        
        private EntityRef<EventTrack> _eventTrack;
        
        private int _eventTrackID;
        
        private string _talkAbstract;
        
        private DateTime _talkEndTime;
        
        private int _talkID;
        
        private DateTime _talkStartTime;
        
        private string _talkTitle;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEventTrackIDChanging(int value);
        partial void OnEventTrackIDChanged();
        partial void OnTalkAbstractChanging(string value);
        partial void OnTalkAbstractChanged();
        partial void OnTalkEndTimeChanging(DateTime value);
        partial void OnTalkEndTimeChanged();
        partial void OnTalkIDChanging(int value);
        partial void OnTalkIDChanged();
        partial void OnTalkStartTimeChanging(DateTime value);
        partial void OnTalkStartTimeChanged();
        partial void OnTalkTitleChanging(string value);
        partial void OnTalkTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Talk()
        {
            this.OnCreated();
        }
        
        [Association("Talk_AttendeeScheduleTalk", "TalkID", "TalkID")]
        [XmlIgnore()]
        public EntityCollection<AttendeeScheduleTalk> AttendeeScheduleTalks
        {
            get
            {
                if ((this._attendeeScheduleTalks == null))
                {
                    this._attendeeScheduleTalks = new EntityCollection<AttendeeScheduleTalk>(this, "AttendeeScheduleTalks", this.FilterAttendeeScheduleTalks, this.AttachAttendeeScheduleTalks, this.DetachAttendeeScheduleTalks);
                }
                return this._attendeeScheduleTalks;
            }
        }
        
        [Association("EventTrack_Talk", "EventTrackID", "EventTrackID", IsForeignKey=true)]
        [XmlIgnore()]
        public EventTrack EventTrack
        {
            get
            {
                if ((this._eventTrack == null))
                {
                    this._eventTrack = new EntityRef<EventTrack>(this, "EventTrack", this.FilterEventTrack);
                }
                return this._eventTrack.Entity;
            }
            set
            {
                EventTrack previous = this.EventTrack;
                if ((previous != value))
                {
                    this.ValidateProperty("EventTrack", value);
                    if ((previous != null))
                    {
                        this._eventTrack.Entity = null;
                        previous.Talks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EventTrackID = value.EventTrackID;
                    }
                    else
                    {
                        this.EventTrackID = default(int);
                    }
                    this._eventTrack.Entity = value;
                    if ((value != null))
                    {
                        value.Talks.Add(this);
                    }
                    this.RaisePropertyChanged("EventTrack");
                }
            }
        }
        
        [DataMember()]
        public int EventTrackID
        {
            get
            {
                return this._eventTrackID;
            }
            set
            {
                if ((this._eventTrackID != value))
                {
                    this.OnEventTrackIDChanging(value);
                    this.RaiseDataMemberChanging("EventTrackID");
                    this.ValidateProperty("EventTrackID", value);
                    this._eventTrackID = value;
                    this.RaiseDataMemberChanged("EventTrackID");
                    this.OnEventTrackIDChanged();
                }
            }
        }
        
        [DataMember()]
        [Required(AllowEmptyStrings=true)]
        public string TalkAbstract
        {
            get
            {
                return this._talkAbstract;
            }
            set
            {
                if ((this._talkAbstract != value))
                {
                    this.OnTalkAbstractChanging(value);
                    this.RaiseDataMemberChanging("TalkAbstract");
                    this.ValidateProperty("TalkAbstract", value);
                    this._talkAbstract = value;
                    this.RaiseDataMemberChanged("TalkAbstract");
                    this.OnTalkAbstractChanged();
                }
            }
        }
        
        [DataMember()]
        public DateTime TalkEndTime
        {
            get
            {
                return this._talkEndTime;
            }
            set
            {
                if ((this._talkEndTime != value))
                {
                    this.OnTalkEndTimeChanging(value);
                    this.RaiseDataMemberChanging("TalkEndTime");
                    this.ValidateProperty("TalkEndTime", value);
                    this._talkEndTime = value;
                    this.RaiseDataMemberChanged("TalkEndTime");
                    this.OnTalkEndTimeChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int TalkID
        {
            get
            {
                return this._talkID;
            }
            set
            {
                if ((this._talkID != value))
                {
                    this.OnTalkIDChanging(value);
                    this.RaiseDataMemberChanging("TalkID");
                    this.ValidateProperty("TalkID", value);
                    this._talkID = value;
                    this.RaiseDataMemberChanged("TalkID");
                    this.OnTalkIDChanged();
                }
            }
        }
        
        [DataMember()]
        public DateTime TalkStartTime
        {
            get
            {
                return this._talkStartTime;
            }
            set
            {
                if ((this._talkStartTime != value))
                {
                    this.OnTalkStartTimeChanging(value);
                    this.RaiseDataMemberChanging("TalkStartTime");
                    this.ValidateProperty("TalkStartTime", value);
                    this._talkStartTime = value;
                    this.RaiseDataMemberChanged("TalkStartTime");
                    this.OnTalkStartTimeChanged();
                }
            }
        }
        
        [DataMember()]
        [Required(AllowEmptyStrings=true)]
        [StringLength(100)]
        public string TalkTitle
        {
            get
            {
                return this._talkTitle;
            }
            set
            {
                if ((this._talkTitle != value))
                {
                    this.OnTalkTitleChanging(value);
                    this.RaiseDataMemberChanging("TalkTitle");
                    this.ValidateProperty("TalkTitle", value);
                    this._talkTitle = value;
                    this.RaiseDataMemberChanged("TalkTitle");
                    this.OnTalkTitleChanged();
                }
            }
        }
        
        private void AttachAttendeeScheduleTalks(AttendeeScheduleTalk entity)
        {
            entity.Talk = this;
        }
        
        private void DetachAttendeeScheduleTalks(AttendeeScheduleTalk entity)
        {
            entity.Talk = null;
        }
        
        private bool FilterAttendeeScheduleTalks(AttendeeScheduleTalk entity)
        {
            return (entity.TalkID == this.TalkID);
        }
        
        private bool FilterEventTrack(EventTrack entity)
        {
            return (entity.EventTrackID == this.EventTrackID);
        }
        
        public override object GetIdentity()
        {
            return this._talkID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SlEventManager.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("SlEventManager-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The UserRegistrationService data service URI.
        /// </param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetUsers'.
        /// </summary>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.Add);
            }
        }
    }
}
namespace SlEventManager.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using SlEventManager.Web;
    
    
    public sealed partial class EventManagerDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public EventManagerDomainContext() : 
                this(new WebDomainClient<IEventManagerDomainServiceContract>(new Uri("SlEventManager-Web-Services-EventManagerDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The EventManagerDomainService data service URI.
        /// </param>
        public EventManagerDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IEventManagerDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public EventManagerDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        public EntitySet<AttendeeEvent> AttendeeEvents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AttendeeEvent>();
            }
        }
        
        public EntitySet<Attendee> Attendees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Attendee>();
            }
        }
        
        public EntitySet<AttendeeScheduleTalk> AttendeeScheduleTalks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AttendeeScheduleTalk>();
            }
        }
        
        public EntitySet<Event> Events
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Event>();
            }
        }
        
        public EntitySet<EventTrack> EventTracks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EventTrack>();
            }
        }
        
        public EntitySet<Talk> Talks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Talk>();
            }
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetAttendeeEvents'.
        /// </summary>
        public EntityQuery<AttendeeEvent> GetAttendeeEventsQuery()
        {
            this.ValidateMethod("GetAttendeeEventsQuery", null);
            return base.CreateQuery<AttendeeEvent>("GetAttendeeEvents", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetAttendees'.
        /// </summary>
        public EntityQuery<Attendee> GetAttendeesQuery()
        {
            this.ValidateMethod("GetAttendeesQuery", null);
            return base.CreateQuery<Attendee>("GetAttendees", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetAttendeeScheduleTalks'.
        /// </summary>
        public EntityQuery<AttendeeScheduleTalk> GetAttendeeScheduleTalksQuery()
        {
            this.ValidateMethod("GetAttendeeScheduleTalksQuery", null);
            return base.CreateQuery<AttendeeScheduleTalk>("GetAttendeeScheduleTalks", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetEvents'.
        /// </summary>
        public EntityQuery<Event> GetEventsQuery()
        {
            this.ValidateMethod("GetEventsQuery", null);
            return base.CreateQuery<Event>("GetEvents", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetEventsWithTracksAndTalks'.
        /// </summary>
        public EntityQuery<Event> GetEventsWithTracksAndTalksQuery()
        {
            this.ValidateMethod("GetEventsWithTracksAndTalksQuery", null);
            return base.CreateQuery<Event>("GetEventsWithTracksAndTalks", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetEventTracks'.
        /// </summary>
        public EntityQuery<EventTrack> GetEventTracksQuery()
        {
            this.ValidateMethod("GetEventTracksQuery", null);
            return base.CreateQuery<EventTrack>("GetEventTracks", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetTalks'.
        /// </summary>
        public EntityQuery<Talk> GetTalksQuery()
        {
            this.ValidateMethod("GetTalksQuery", null);
            return base.CreateQuery<Talk>("GetTalks", null, false, true);
        }
        
        public InvokeOperation<IEnumerable<int>> FetchEventsForWhichCurrentUserIsRegistered(Action<InvokeOperation<IEnumerable<int>>> callback, object userState)
        {
            this.ValidateMethod("FetchEventsForWhichCurrentUserIsRegistered", null);
            return ((InvokeOperation<IEnumerable<int>>)(base.InvokeOperation("FetchEventsForWhichCurrentUserIsRegistered", typeof(IEnumerable<int>), null, true, callback, userState)));
        }
        
        public InvokeOperation<IEnumerable<int>> FetchEventsForWhichCurrentUserIsRegistered()
        {
            this.ValidateMethod("FetchEventsForWhichCurrentUserIsRegistered", null);
            return ((InvokeOperation<IEnumerable<int>>)(base.InvokeOperation("FetchEventsForWhichCurrentUserIsRegistered", typeof(IEnumerable<int>), null, true, null, null)));
        }
        
        public InvokeOperation RegisterCurrentUserForEvent(int eventId, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("eventId", eventId);
            this.ValidateMethod("RegisterCurrentUserForEvent", parameters);
            return base.InvokeOperation("RegisterCurrentUserForEvent", typeof(void), parameters, true, callback, userState);
        }
        
        public InvokeOperation RegisterCurrentUserForEvent(int eventId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("eventId", eventId);
            this.ValidateMethod("RegisterCurrentUserForEvent", parameters);
            return base.InvokeOperation("RegisterCurrentUserForEvent", typeof(void), parameters, true, null, null);
        }
        
        public InvokeOperation UnregisterCurrentUserForEvent(int eventId, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("eventId", eventId);
            this.ValidateMethod("UnregisterCurrentUserForEvent", parameters);
            return base.InvokeOperation("UnregisterCurrentUserForEvent", typeof(void), parameters, true, callback, userState);
        }
        
        public InvokeOperation UnregisterCurrentUserForEvent(int eventId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("eventId", eventId);
            this.ValidateMethod("UnregisterCurrentUserForEvent", parameters);
            return base.InvokeOperation("UnregisterCurrentUserForEvent", typeof(void), parameters, true, null, null);
        }
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new EventManagerDomainContextEntityContainer();
        }
        
        [ServiceContract()]
        public interface IEventManagerDomainServiceContract
        {
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/GetAttendeesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/GetAttendees", ReplyAction="http://tempuri.org/EventManagerDomainService/GetAttendeesResponse")]
            [WebGet()]
            IAsyncResult BeginGetAttendees(AsyncCallback callback, object asyncState);
            
            QueryResult<Attendee> EndGetAttendees(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/GetAttendeeEventsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/GetAttendeeEvents", ReplyAction="http://tempuri.org/EventManagerDomainService/GetAttendeeEventsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAttendeeEvents(AsyncCallback callback, object asyncState);
            
            QueryResult<AttendeeEvent> EndGetAttendeeEvents(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/GetAttendeeScheduleTalksDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/GetAttendeeScheduleTalks", ReplyAction="http://tempuri.org/EventManagerDomainService/GetAttendeeScheduleTalksResponse")]
            [WebGet()]
            IAsyncResult BeginGetAttendeeScheduleTalks(AsyncCallback callback, object asyncState);
            
            QueryResult<AttendeeScheduleTalk> EndGetAttendeeScheduleTalks(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/GetEventsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/GetEvents", ReplyAction="http://tempuri.org/EventManagerDomainService/GetEventsResponse")]
            [WebGet()]
            IAsyncResult BeginGetEvents(AsyncCallback callback, object asyncState);
            
            QueryResult<Event> EndGetEvents(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/GetEventsWithTracksAndTalksDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/GetEventsWithTracksAndTalks", ReplyAction="http://tempuri.org/EventManagerDomainService/GetEventsWithTracksAndTalksResponse")]
            [WebGet()]
            IAsyncResult BeginGetEventsWithTracksAndTalks(AsyncCallback callback, object asyncState);
            
            QueryResult<Event> EndGetEventsWithTracksAndTalks(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/GetEventTracksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/GetEventTracks", ReplyAction="http://tempuri.org/EventManagerDomainService/GetEventTracksResponse")]
            [WebGet()]
            IAsyncResult BeginGetEventTracks(AsyncCallback callback, object asyncState);
            
            QueryResult<EventTrack> EndGetEventTracks(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/GetTalksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/GetTalks", ReplyAction="http://tempuri.org/EventManagerDomainService/GetTalksResponse")]
            [WebGet()]
            IAsyncResult BeginGetTalks(AsyncCallback callback, object asyncState);
            
            QueryResult<Talk> EndGetTalks(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/FetchEventsForWhichCurrentUserIsRegi" +
                "steredDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/FetchEventsForWhichCurrentUserIsRegi" +
                "stered", ReplyAction="http://tempuri.org/EventManagerDomainService/FetchEventsForWhichCurrentUserIsRegi" +
                "steredResponse")]
            IAsyncResult BeginFetchEventsForWhichCurrentUserIsRegistered(AsyncCallback callback, object asyncState);
            
            IEnumerable<int> EndFetchEventsForWhichCurrentUserIsRegistered(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/RegisterCurrentUserForEventDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/RegisterCurrentUserForEvent", ReplyAction="http://tempuri.org/EventManagerDomainService/RegisterCurrentUserForEventResponse")]
            IAsyncResult BeginRegisterCurrentUserForEvent(int eventId, AsyncCallback callback, object asyncState);
            
            void EndRegisterCurrentUserForEvent(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/UnregisterCurrentUserForEventDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/UnregisterCurrentUserForEvent", ReplyAction="http://tempuri.org/EventManagerDomainService/UnregisterCurrentUserForEventRespons" +
                "e")]
            IAsyncResult BeginUnregisterCurrentUserForEvent(int eventId, AsyncCallback callback, object asyncState);
            
            void EndUnregisterCurrentUserForEvent(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventManagerDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventManagerDomainService/SubmitChanges", ReplyAction="http://tempuri.org/EventManagerDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class EventManagerDomainContextEntityContainer : EntityContainer
        {
            
            public EventManagerDomainContextEntityContainer()
            {
                this.CreateEntitySet<Attendee>(EntitySetOperations.All);
                this.CreateEntitySet<AttendeeEvent>(EntitySetOperations.All);
                this.CreateEntitySet<AttendeeScheduleTalk>(EntitySetOperations.All);
                this.CreateEntitySet<Event>(EntitySetOperations.All);
                this.CreateEntitySet<EventTrack>(EntitySetOperations.All);
                this.CreateEntitySet<Talk>(EntitySetOperations.All);
            }
        }
    }
}