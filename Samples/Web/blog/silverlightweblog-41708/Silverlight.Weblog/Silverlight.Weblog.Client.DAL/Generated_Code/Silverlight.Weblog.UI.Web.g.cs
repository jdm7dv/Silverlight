//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Silverlight.Weblog.Server.DAL
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Web.Ria.Data;
    using System.Windows.Ria;
    using System.Windows.Ria.Services;
    using System.Xml.Serialization;
    
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Silverlight.Weblog.Server.DAL")]
    public sealed partial class BlogPost : Entity
    {
        
        private EntityCollection<Category> _categories;
        
        private EntityCollection<Comment> _comments;
        
        private Nullable<DateTime> _dateCreated;
        
        private string _html;
        
        private int _id;
        
        private string _permlink;
        
        private EntityCollection<PostCategory> _postCategories;
        
        private string _title;
        
        private EntityRef<User> _user;
        
        private Nullable<int> _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateCreatedChanging(Nullable<DateTime> value);
        partial void OnDateCreatedChanged();
        partial void OnHTMLChanging(string value);
        partial void OnHTMLChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPermlinkChanging(string value);
        partial void OnPermlinkChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUserIDChanging(Nullable<int> value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public BlogPost()
        {
            this.OnCreated();
        }
        
        [Association("Categories_BlogPost", "ID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public EntityCollection<Category> Categories
        {
            get
            {
                if ((this._categories == null))
                {
                    this._categories = new EntityCollection<Category>(this, "Categories", this.FilterCategories);
                }
                return this._categories;
            }
        }
        
        [Association("BlogPost_Comment", "ID", "PostID")]
        [XmlIgnore()]
        public EntityCollection<Comment> Comments
        {
            get
            {
                if ((this._comments == null))
                {
                    this._comments = new EntityCollection<Comment>(this, "Comments", this.FilterComments, this.AttachComments, this.DetachComments);
                }
                return this._comments;
            }
        }
        
        [DataMember()]
        public Nullable<DateTime> DateCreated
        {
            get
            {
                return this._dateCreated;
            }
            set
            {
                if ((this._dateCreated != value))
                {
                    this.ValidateProperty("DateCreated", value);
                    this.OnDateCreatedChanging(value);
                    this.RaiseDataMemberChanging("DateCreated");
                    this._dateCreated = value;
                    this.RaiseDataMemberChanged("DateCreated");
                    this.OnDateCreatedChanged();
                }
            }
        }
        
        [DataMember()]
        public string HTML
        {
            get
            {
                return this._html;
            }
            set
            {
                if ((this._html != value))
                {
                    this.ValidateProperty("HTML", value);
                    this.OnHTMLChanging(value);
                    this.RaiseDataMemberChanging("HTML");
                    this._html = value;
                    this.RaiseDataMemberChanged("HTML");
                    this.OnHTMLChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.ValidateProperty("ID", value);
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(300)]
        public string Permlink
        {
            get
            {
                return this._permlink;
            }
            set
            {
                if ((this._permlink != value))
                {
                    this.ValidateProperty("Permlink", value);
                    this.OnPermlinkChanging(value);
                    this.RaiseDataMemberChanging("Permlink");
                    this._permlink = value;
                    this.RaiseDataMemberChanged("Permlink");
                    this.OnPermlinkChanged();
                }
            }
        }
        
        [Association("BlogPost_PostCategory", "ID", "PostID")]
        [XmlIgnore()]
        public EntityCollection<PostCategory> PostCategories
        {
            get
            {
                if ((this._postCategories == null))
                {
                    this._postCategories = new EntityCollection<PostCategory>(this, "PostCategories", this.FilterPostCategories, this.AttachPostCategories, this.DetachPostCategories);
                }
                return this._postCategories;
            }
        }
        
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.ValidateProperty("Title", value);
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        [Association("User_BlogPost", "UserID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public User User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<User>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                User previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.Posts.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserID = value.ID;
                    }
                    else
                    {
                        this.UserID = default(Nullable<int>);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.Posts.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [DataMember()]
        public Nullable<int> UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.ValidateProperty("UserID", value);
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        private bool FilterCategories(Category entity)
        {
            return (entity.ID == this.ID);
        }
        
        private void AttachComments(Comment entity)
        {
            entity.BlogPost = this;
        }
        
        private void DetachComments(Comment entity)
        {
            entity.BlogPost = null;
        }
        
        private bool FilterComments(Comment entity)
        {
            return (entity.PostID == this.ID);
        }
        
        private void AttachPostCategories(PostCategory entity)
        {
            entity.Post = this;
        }
        
        private void DetachPostCategories(PostCategory entity)
        {
            entity.Post = null;
        }
        
        private bool FilterPostCategories(PostCategory entity)
        {
            return (entity.PostID == this.ID);
        }
        
        private bool FilterUser(User entity)
        {
            return (entity.ID == this.UserID);
        }
        
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Silverlight.Weblog.Server.DAL")]
    public sealed partial class Category : Entity
    {
        
        private EntityCollection<Category> _childCategories;
        
        private int _id;
        
        private string _name;
        
        private EntityRef<Category> _parentCategory;
        
        private EntityCollection<PostCategory> _postCategory;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Category()
        {
            this.OnCreated();
        }
        
        [Association("Category_ChildCategories", "ID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public EntityCollection<Category> ChildCategories
        {
            get
            {
                if ((this._childCategories == null))
                {
                    this._childCategories = new EntityCollection<Category>(this, "ChildCategories", this.FilterChildCategories, this.AttachChildCategories, this.DetachChildCategories);
                }
                return this._childCategories;
            }
        }
        
        [DataMember()]
        [Key()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.ValidateProperty("ID", value);
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(128)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.ValidateProperty("Name", value);
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        [Association("Category_ChildCategories", "ID", "ID")]
        [XmlIgnore()]
        public Category ParentCategory
        {
            get
            {
                if ((this._parentCategory == null))
                {
                    this._parentCategory = new EntityRef<Category>(this, "ParentCategory", this.FilterParentCategory);
                }
                return this._parentCategory.Entity;
            }
            set
            {
                Category previous = this.ParentCategory;
                if ((previous != value))
                {
                    this.ValidateProperty("ParentCategory", value);
                    if ((previous != null))
                    {
                        this._parentCategory.Entity = null;
                        previous.ChildCategories.Remove(this);
                    }
                    this._parentCategory.Entity = value;
                    if ((value != null))
                    {
                        value.ChildCategories.Add(this);
                    }
                    this.RaisePropertyChanged("ParentCategory");
                }
            }
        }
        
        [Association("Category_PostCategory", "ID", "CategoryID")]
        [XmlIgnore()]
        public EntityCollection<PostCategory> PostCategory
        {
            get
            {
                if ((this._postCategory == null))
                {
                    this._postCategory = new EntityCollection<PostCategory>(this, "PostCategory", this.FilterPostCategory, this.AttachPostCategory, this.DetachPostCategory);
                }
                return this._postCategory;
            }
        }
        
        private void AttachChildCategories(Category entity)
        {
            entity.ParentCategory = this;
        }
        
        private void DetachChildCategories(Category entity)
        {
            entity.ParentCategory = null;
        }
        
        private bool FilterChildCategories(Category entity)
        {
            return (entity.ID == this.ID);
        }
        
        private bool FilterParentCategory(Category entity)
        {
            return (entity.ID == this.ID);
        }
        
        private void AttachPostCategory(PostCategory entity)
        {
            entity.Category = this;
        }
        
        private void DetachPostCategory(PostCategory entity)
        {
            entity.Category = null;
        }
        
        private bool FilterPostCategory(PostCategory entity)
        {
            return (entity.CategoryID == this.ID);
        }
        
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Silverlight.Weblog.Server.DAL")]
    public sealed partial class Comment : Entity
    {
        
        private EntityRef<BlogPost> _blogPost;
        
        private EntityCollection<Comment> _childComments;
        
        private string _email;
        
        private string _html;
        
        private int _id;
        
        private string _name;
        
        private EntityRef<Comment> _parentComment;
        
        private Nullable<int> _parentID;
        
        private Nullable<int> _postID;
        
        private string _url;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnHTMLChanging(string value);
        partial void OnHTMLChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentIDChanging(Nullable<int> value);
        partial void OnParentIDChanged();
        partial void OnPostIDChanging(Nullable<int> value);
        partial void OnPostIDChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Comment()
        {
            this.OnCreated();
        }
        
        [Association("BlogPost_Comment", "PostID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public BlogPost BlogPost
        {
            get
            {
                if ((this._blogPost == null))
                {
                    this._blogPost = new EntityRef<BlogPost>(this, "BlogPost", this.FilterBlogPost);
                }
                return this._blogPost.Entity;
            }
            set
            {
                BlogPost previous = this.BlogPost;
                if ((previous != value))
                {
                    this.ValidateProperty("BlogPost", value);
                    if ((previous != null))
                    {
                        this._blogPost.Entity = null;
                        previous.Comments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PostID = value.ID;
                    }
                    else
                    {
                        this.PostID = default(Nullable<int>);
                    }
                    this._blogPost.Entity = value;
                    if ((value != null))
                    {
                        value.Comments.Add(this);
                    }
                    this.RaisePropertyChanged("BlogPost");
                }
            }
        }
        
        [Association("Comment_Comment", "ID", "ParentID")]
        [XmlIgnore()]
        public EntityCollection<Comment> ChildComments
        {
            get
            {
                if ((this._childComments == null))
                {
                    this._childComments = new EntityCollection<Comment>(this, "ChildComments", this.FilterChildComments, this.AttachChildComments, this.DetachChildComments);
                }
                return this._childComments;
            }
        }
        
        [DataMember()]
        [Required(ErrorMessage="Please write down your Email.")]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.ValidateProperty("Email", value);
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        [DataMember()]
        [Required(ErrorMessage="Please write down your Comments.")]
        public string HTML
        {
            get
            {
                return this._html;
            }
            set
            {
                if ((this._html != value))
                {
                    this.ValidateProperty("HTML", value);
                    this.OnHTMLChanging(value);
                    this.RaiseDataMemberChanging("HTML");
                    this._html = value;
                    this.RaiseDataMemberChanged("HTML");
                    this.OnHTMLChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.ValidateProperty("ID", value);
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        [DataMember()]
        [Required(ErrorMessage="Please write down your Name.")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.ValidateProperty("Name", value);
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        [Association("Comment_Comment", "ParentID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Comment ParentComment
        {
            get
            {
                if ((this._parentComment == null))
                {
                    this._parentComment = new EntityRef<Comment>(this, "ParentComment", this.FilterParentComment);
                }
                return this._parentComment.Entity;
            }
            set
            {
                Comment previous = this.ParentComment;
                if ((previous != value))
                {
                    this.ValidateProperty("ParentComment", value);
                    if ((previous != null))
                    {
                        this._parentComment.Entity = null;
                        previous.ChildComments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentID = value.ID;
                    }
                    else
                    {
                        this.ParentID = default(Nullable<int>);
                    }
                    this._parentComment.Entity = value;
                    if ((value != null))
                    {
                        value.ChildComments.Add(this);
                    }
                    this.RaisePropertyChanged("ParentComment");
                }
            }
        }
        
        [DataMember()]
        public Nullable<int> ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.ValidateProperty("ParentID", value);
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<int> PostID
        {
            get
            {
                return this._postID;
            }
            set
            {
                if ((this._postID != value))
                {
                    this.ValidateProperty("PostID", value);
                    this.OnPostIDChanging(value);
                    this.RaiseDataMemberChanging("PostID");
                    this._postID = value;
                    this.RaiseDataMemberChanged("PostID");
                    this.OnPostIDChanged();
                }
            }
        }
        
        [DataMember()]
        public string Url
        {
            get
            {
                return this._url;
            }
            set
            {
                if ((this._url != value))
                {
                    this.ValidateProperty("Url", value);
                    this.OnUrlChanging(value);
                    this.RaiseDataMemberChanging("Url");
                    this._url = value;
                    this.RaiseDataMemberChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }
        
        private bool FilterBlogPost(BlogPost entity)
        {
            return (entity.ID == this.PostID);
        }
        
        private void AttachChildComments(Comment entity)
        {
            entity.ParentComment = this;
        }
        
        private void DetachChildComments(Comment entity)
        {
            entity.ParentComment = null;
        }
        
        private bool FilterChildComments(Comment entity)
        {
            return (entity.ParentID == this.ID);
        }
        
        private bool FilterParentComment(Comment entity)
        {
            return (entity.ID == this.ParentID);
        }
        
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Silverlight.Weblog.Server.DAL")]
    public sealed partial class PostCategory : Entity
    {
        
        private EntityRef<Category> _category;
        
        private int _categoryID;
        
        private int _id;
        
        private EntityRef<BlogPost> _post;
        
        private int _postID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPostIDChanging(int value);
        partial void OnPostIDChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public PostCategory()
        {
            this.OnCreated();
        }
        
        [Association("Category_PostCategory", "CategoryID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public Category Category
        {
            get
            {
                if ((this._category == null))
                {
                    this._category = new EntityRef<Category>(this, "Category", this.FilterCategory);
                }
                return this._category.Entity;
            }
            set
            {
                Category previous = this.Category;
                if ((previous != value))
                {
                    this.ValidateProperty("Category", value);
                    if ((previous != null))
                    {
                        this._category.Entity = null;
                        previous.PostCategory.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CategoryID = value.ID;
                    }
                    else
                    {
                        this.CategoryID = default(int);
                    }
                    this._category.Entity = value;
                    if ((value != null))
                    {
                        value.PostCategory.Add(this);
                    }
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [DataMember()]
        public int CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.ValidateProperty("CategoryID", value);
                    this.OnCategoryIDChanging(value);
                    this.RaiseDataMemberChanging("CategoryID");
                    this._categoryID = value;
                    this.RaiseDataMemberChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.ValidateProperty("ID", value);
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        [Association("BlogPost_PostCategory", "PostID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public BlogPost Post
        {
            get
            {
                if ((this._post == null))
                {
                    this._post = new EntityRef<BlogPost>(this, "Post", this.FilterPost);
                }
                return this._post.Entity;
            }
            set
            {
                BlogPost previous = this.Post;
                if ((previous != value))
                {
                    this.ValidateProperty("Post", value);
                    if ((previous != null))
                    {
                        this._post.Entity = null;
                        previous.PostCategories.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PostID = value.ID;
                    }
                    else
                    {
                        this.PostID = default(int);
                    }
                    this._post.Entity = value;
                    if ((value != null))
                    {
                        value.PostCategories.Add(this);
                    }
                    this.RaisePropertyChanged("Post");
                }
            }
        }
        
        [DataMember()]
        public int PostID
        {
            get
            {
                return this._postID;
            }
            set
            {
                if ((this._postID != value))
                {
                    this.ValidateProperty("PostID", value);
                    this.OnPostIDChanging(value);
                    this.RaiseDataMemberChanging("PostID");
                    this._postID = value;
                    this.RaiseDataMemberChanged("PostID");
                    this.OnPostIDChanged();
                }
            }
        }
        
        private bool FilterCategory(Category entity)
        {
            return (entity.ID == this.CategoryID);
        }
        
        private bool FilterPost(BlogPost entity)
        {
            return (entity.ID == this.PostID);
        }
        
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Silverlight.Weblog.Server.DAL")]
    public sealed partial class User : Entity
    {
        
        private string _blogName;
        
        private string _blogTitle;
        
        private string _displayName;
        
        private string _email;
        
        private string _homeUrl;
        
        private int _id;
        
        private Nullable<bool> _isDefaultBlog;
        
        private EntityCollection<BlogPost> _posts;
        
        private string _username;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBlogNameChanging(string value);
        partial void OnBlogNameChanged();
        partial void OnBlogTitleChanging(string value);
        partial void OnBlogTitleChanged();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnHomeUrlChanging(string value);
        partial void OnHomeUrlChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIsDefaultBlogChanging(Nullable<bool> value);
        partial void OnIsDefaultBlogChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        public string BlogName
        {
            get
            {
                return this._blogName;
            }
            set
            {
                if ((this._blogName != value))
                {
                    this.ValidateProperty("BlogName", value);
                    this.OnBlogNameChanging(value);
                    this.RaiseDataMemberChanging("BlogName");
                    this._blogName = value;
                    this.RaiseDataMemberChanged("BlogName");
                    this.OnBlogNameChanged();
                }
            }
        }
        
        [DataMember()]
        public string BlogTitle
        {
            get
            {
                return this._blogTitle;
            }
            set
            {
                if ((this._blogTitle != value))
                {
                    this.ValidateProperty("BlogTitle", value);
                    this.OnBlogTitleChanging(value);
                    this.RaiseDataMemberChanging("BlogTitle");
                    this._blogTitle = value;
                    this.RaiseDataMemberChanged("BlogTitle");
                    this.OnBlogTitleChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(64)]
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if ((this._displayName != value))
                {
                    this.ValidateProperty("DisplayName", value);
                    this.OnDisplayNameChanging(value);
                    this.RaiseDataMemberChanging("DisplayName");
                    this._displayName = value;
                    this.RaiseDataMemberChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }
        
        [DataMember()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.ValidateProperty("Email", value);
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        [DataMember()]
        public string HomeUrl
        {
            get
            {
                return this._homeUrl;
            }
            set
            {
                if ((this._homeUrl != value))
                {
                    this.ValidateProperty("HomeUrl", value);
                    this.OnHomeUrlChanging(value);
                    this.RaiseDataMemberChanging("HomeUrl");
                    this._homeUrl = value;
                    this.RaiseDataMemberChanged("HomeUrl");
                    this.OnHomeUrlChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.ValidateProperty("ID", value);
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<bool> IsDefaultBlog
        {
            get
            {
                return this._isDefaultBlog;
            }
            set
            {
                if ((this._isDefaultBlog != value))
                {
                    this.ValidateProperty("IsDefaultBlog", value);
                    this.OnIsDefaultBlogChanging(value);
                    this.RaiseDataMemberChanging("IsDefaultBlog");
                    this._isDefaultBlog = value;
                    this.RaiseDataMemberChanged("IsDefaultBlog");
                    this.OnIsDefaultBlogChanged();
                }
            }
        }
        
        [Association("User_BlogPost", "ID", "UserID")]
        [XmlIgnore()]
        public EntityCollection<BlogPost> Posts
        {
            get
            {
                if ((this._posts == null))
                {
                    this._posts = new EntityCollection<BlogPost>(this, "Posts", this.FilterPosts, this.AttachPosts, this.DetachPosts);
                }
                return this._posts;
            }
        }
        
        [DataMember()]
        [StringLength(64)]
        public string Username
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.ValidateProperty("Username", value);
                    this.OnUsernameChanging(value);
                    this.RaiseDataMemberChanging("Username");
                    this._username = value;
                    this.RaiseDataMemberChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }
        
        private void AttachPosts(BlogPost entity)
        {
            entity.User = this;
        }
        
        private void DetachPosts(BlogPost entity)
        {
            entity.User = null;
        }
        
        private bool FilterPosts(BlogPost entity)
        {
            return (entity.UserID == this.ID);
        }
        
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace Silverlight.Weblog.UI.Web.RiaServices
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.Web.Ria.Data;
    using System.Windows.Ria;
    using System.Windows.Ria.Services;
    using Silverlight.Weblog.Server.DAL;
    
    
    public sealed partial class BlogDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public BlogDomainContext() : 
                this(new WebDomainClient<IBlogDomainServiceContract>(new Uri("Silverlight-Weblog-UI-Web-RiaServices-BlogDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The BlogDomainService data service URI.
        /// </param>
        public BlogDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IBlogDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public BlogDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        public EntitySet<BlogPost> BlogPosts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BlogPost>();
            }
        }
        
        public EntitySet<Comment> Comments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Comment>();
            }
        }
        
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetBlogPostSet'.
        /// </summary>
        public EntityQuery<BlogPost> GetBlogPostSetQuery(int PrimaryKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("PrimaryKey", PrimaryKey);
            this.ValidateMethod("GetBlogPostSetQuery", parameters);
            return base.CreateQuery<BlogPost>("GetBlogPostSet", parameters, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetComments'.
        /// </summary>
        public EntityQuery<Comment> GetCommentsQuery()
        {
            this.ValidateMethod("GetCommentsQuery", null);
            return base.CreateQuery<Comment>("GetComments", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'InitialData'.
        /// </summary>
        [OperationContract()]
        public EntityQuery<User> InitialDataQuery(Uri UriForDataPack)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UriForDataPack", UriForDataPack);
            this.ValidateMethod("InitialDataQuery", parameters);
            return base.CreateQuery<User>("InitialData", parameters, false, false);
        }
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new BlogDomainContextEntityContainer();
        }
        
        [ServiceContract()]
        public interface IBlogDomainServiceContract
        {
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BlogDomainService/InitialDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BlogDomainService/InitialData", ReplyAction="http://tempuri.org/BlogDomainService/InitialDataResponse")]
            IAsyncResult BeginInitialData(Uri UriForDataPack, AsyncCallback callback, object asyncState);
            
            QueryResult<User> EndInitialData(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BlogDomainService/GetBlogPostSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BlogDomainService/GetBlogPostSet", ReplyAction="http://tempuri.org/BlogDomainService/GetBlogPostSetResponse")]
            IAsyncResult BeginGetBlogPostSet(int PrimaryKey, AsyncCallback callback, object asyncState);
            
            QueryResult<BlogPost> EndGetBlogPostSet(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BlogDomainService/GetCommentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BlogDomainService/GetComments", ReplyAction="http://tempuri.org/BlogDomainService/GetCommentsResponse")]
            IAsyncResult BeginGetComments(AsyncCallback callback, object asyncState);
            
            QueryResult<Comment> EndGetComments(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BlogDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BlogDomainService/SubmitChanges", ReplyAction="http://tempuri.org/BlogDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class BlogDomainContextEntityContainer : EntityContainer
        {
            
            public BlogDomainContextEntityContainer()
            {
                this.CreateEntitySet<BlogPost>(EntitySetOperations.None);
                this.CreateEntitySet<Category>(EntitySetOperations.None);
                this.CreateEntitySet<Comment>(EntitySetOperations.Add);
                this.CreateEntitySet<PostCategory>(EntitySetOperations.None);
                this.CreateEntitySet<User>(EntitySetOperations.None);
            }
        }
    }
}
