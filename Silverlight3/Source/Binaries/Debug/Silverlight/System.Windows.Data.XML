<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Data</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Data.CollectionViewGroup">
            <summary>
            A CollectionViewGroup, as created by a PagedCollectionView according to a GroupDescription.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroup._itemCount">
            <summary>
            The number of data items (leaves) in the subtree under this group.
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroup._itemsRO">
            <summary>
            The immediate children of the group.
            These may be data items (leaves) or subgroups.
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroup._itemsRW">
            <summary>
            A writable copy of the collection of children of the group.
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroup._name">
            <summary>
            The name of the group, which is the common value of the
            property used to divide data items into groups.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroup.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the CollectionViewGroup class.
            </summary>
            <param name="name">Name of the CollectionViewGroup</param>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroup.IsBottomLevel">
            <summary>
            Gets a value indicating whether this group is at the 
            bottom level (not further sub-grouped).
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroup.Items">
            <summary>
            Gets the immediate children of the group.
            These may be data items (leaves) or subgroups.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroup.ItemCount">
            <summary>
            Gets the number of data items (leaves) in the subtree under this group.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroup.Name">
            <summary>
            Gets the name of the group, which is the common value of the
            property used to divide data items into groups.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroup.ProtectedItemCount">
            <summary>
            Gets or sets the number of data items (leaves) in the subtree 
            under this group. Derived classes can change the count using 
            this property; the changes will be reflected in the public 
            ItemCount property.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroup.ProtectedItems">
            <summary>
            Gets the items of the group.
            Derived classes can add or remove items using this property;
            the changes will be reflected in the public Items property.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroup.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
            <param name="e">EventArgs for the PropertyChange</param>
        </member>
        <member name="E:System.Windows.Data.CollectionViewGroup.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="E:System.Windows.Data.CollectionViewGroup.PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupInternal">
            <summary>
            A CollectionViewGroupInternal, as created by a PagedCollectionView 
            according to a GroupDescription.
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupInternal._groupBy">
            <summary>
            GroupDescription used to define how to group the items
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupInternal._parentGroup">
            <summary>
            Parent group of this CollectionViewGroupInternal
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupInternal._version">
            <summary>
            Used for detecting stale enumerators
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.#ctor(System.Object,System.Windows.Data.CollectionViewGroupInternal)">
            <summary>
            Initializes a new instance of the CollectionViewGroupInternal class.
            </summary>
            <param name="name">Name of the CollectionViewGroupInternal</param>
            <param name="parent">Parent node of the CollectionViewGroup</param>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.IsBottomLevel">
            <summary>
            Gets a value indicating whether this group 
            is at the bottom level (not further sub-grouped).
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.FullCount">
            <summary>
            Gets or sets the number of items and groups in the subtree under this group
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.GroupBy">
            <summary>
            Gets or sets how this group divides into subgroups
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.LastIndex">
            <summary>
            Gets or sets the most recent index where activity took place
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.SeedItem">
            <summary>
            Gets the first item (leaf) added to this group.  If this can't be determined,
            DependencyProperty.UnsetValue.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.Parent">
            <summary>
            Gets the parent node for this CollectionViewGroupInternal
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Add(System.Object)">
            <summary>
            Adds the specified item to the collection
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Clear">
            <summary>
            Clears the collection of items
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.FindIndex(System.Object,System.Object,System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Finds the index of the specified item
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="seed">Seed of the item we are looking for</param>
            <param name="comparer">Comparer used to find the item</param>
            <param name="low">Low range of item index</param>
            <param name="high">High range of item index</param>
            <returns>Index of the specified item</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.GetLeafEnumerator">
            <summary>
            Returns an enumerator over the leaves governed by this group
            </summary>
            <returns>Enumerator of leaves</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Insert(System.Object,System.Object,System.Collections.IComparer)">
            <summary>
            Insert a new item or subgroup and return its index.  Seed is a
            representative from the subgroup (or the item itself) that
            is used to position the new item/subgroup w.r.t. the order given
            by the comparer. (If comparer is null, just add at the end).
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="seed">Seed of the item we are looking for</param>
            <param name="comparer">Comparer used to find the item</param>
            <returns>The index where the item was inserted</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafAt(System.Int32)">
            <summary>
            Return the item at the given index within the list of leaves governed
            by this group
            </summary>
            <param name="index">Index of the leaf</param>
            <returns>Item at given index</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafIndexFromItem(System.Object,System.Int32)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by the full group structure.  The item must be a (direct) child of this
            group.  The caller provides the index of the item within this group,
            if known, or -1 if not.
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="index">Index of the leaf</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafIndexOf(System.Object)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by this group
            </summary>
            <param name="item">Item we are looking for</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.OnGroupByChanged">
            <summary>
            The group's description has changed - notify parent 
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified item from the collection
            </summary>
            <param name="item">Item to remove</param>
            <param name="returnLeafIndex">Whether we want to return the leaf index</param>
            <returns>Leaf index where item was removed, if value was specified. Otherwise '-1'</returns>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupInternal.ListComparer">
            <summary>
            This comparer is used to insert an item into a group in a position consistent
            with a given IList.  It only works when used in the pattern that FindIndex
            uses, namely first call Reset(), then call Compare(item, itemSequence) any number of
            times with the same item (the new item) as the first argument, and a sequence
            of items as the second argument that appear in the IList in the same sequence.
            This makes the total search time linear in the size of the IList.  (To give
            the correct answer regardless of the sequence of arguments would involve
            calling IndexOf and leads to O(N^2) total search time.) 
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ListComparer.#ctor(System.Collections.IList)">
            <summary>
            Constructor for the ListComparer that takes
            in an IList.
            </summary>
            <param name="list">IList used to compare on</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ListComparer.Reset">
            <summary>
            Sets the index that we start comparing
            from to 0.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ListComparer.ResetList(System.Collections.IList)">
            <summary>
            Sets our IList to a new instance
            of a list being passed in and resets
            the index.
            </summary>
            <param name="list">IList used to compare on</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ListComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares objects x and y to see which one
            should appear first.
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns>-1 if x is less than y, +1 otherwise</returns>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer">
            <summary>
            This comparer is used to insert an item into a group in a position consistent
            with a given CollectionViewGroupRoot. We will only use this when dealing with
            a temporary CollectionViewGroupRoot that points to the correct grouping of the
            entire collection, and we have paging that requires us to keep the paged group
            consistent with the order of items in the temporary group.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer.#ctor(System.Windows.Data.CollectionViewGroupRoot)">
            <summary>
            Constructor for the CollectionViewGroupComparer that takes
            in an CollectionViewGroupRoot.
            </summary>
            <param name="group">CollectionViewGroupRoot used to compare on</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer.Reset">
            <summary>
            Sets the index that we start comparing
            from to 0.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer.ResetGroup(System.Windows.Data.CollectionViewGroupRoot)">
            <summary>
            Sets our group to a new instance of a
            CollectionViewGroupRoot being passed in
            and resets the index.
            </summary>
            <param name="group">CollectionViewGroupRoot used to compare on</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares objects x and y to see which one
            should appear first.
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns>-1 if x is less than y, +1 otherwise</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.RemoveEmptyGroup(System.Windows.Data.CollectionViewGroupInternal)">
            <summary>
            Removes an empty group from the PagedCollectionView grouping
            </summary>
            <param name="group">Empty subgroup to remove</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ChangeCounts(System.Object,System.Int32)">
            <summary>
            Update the item count of the CollectionViewGroup
            </summary>
            <param name="item">CollectionViewGroup to update</param>
            <param name="delta">Delta to change count by</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.OnGroupByChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handler for the GroupBy PropertyChanged event
            </summary>
            <param name="sender">CollectionViewGroupInternal whose GroupBy property changed</param>
            <param name="e">The args for the PropertyChanged event</param>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator">
            <summary>
            Enumerator for the leaves in the CollectionViewGroupInternal class.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.#ctor(System.Windows.Data.CollectionViewGroupInternal)">
            <summary>
            Initializes a new instance of the LeafEnumerator class.
            </summary>
            <param name="group">CollectionViewGroupInternal that uses the enumerator</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.DoReset">
            <summary>
            Private helper to reset the enumerator
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Reset implementation for IEnumerator
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
            MoveNext implementation for IEnumerator
            </summary>
            <returns>Returns whether the MoveNext operation was successful</returns>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current implementation for IEnumerator
            </summary>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupRoot">
            <summary>
            PagedCollectionView classes use this class as the manager 
            of all Grouping functionality
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot.RootName">
            <summary>
            String constant used for the Root Name
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot.UseAsItemDirectly">
            <summary>
            Private accessor for empty object instance
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot.topLevelGroupDescription">
            <summary>
            Private accessor for the top level GroupDescription
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot._groupBy">
            <summary>
            Private accessor for an ObservableCollection containing group descriptions
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot._isDataInGroupOrder">
            <summary>
            Indicates whether the list of items (after applying the sort and filters, if any) 
            is already in the correct order for grouping.
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot._view">
            <summary>
            Private accessor for the owning ICollectionView
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.#ctor(System.ComponentModel.ICollectionView,System.Boolean)">
            <summary>
            Initializes a new instance of the CollectionViewGroupRoot class.
            </summary>
            <param name="view">PagedCollectionView that contains this grouping</param>
            <param name="isDataInGroupOrder">True if items are already in correct order for grouping</param>
        </member>
        <member name="E:System.Windows.Data.CollectionViewGroupRoot.CollectionChanged">
            <summary>
            Raise this event when the (grouped) view changes
            </summary>
        </member>
        <member name="E:System.Windows.Data.CollectionViewGroupRoot.GroupDescriptionChanged">
            <summary>
            Raise this event when the GroupDescriptions change
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.GroupBySelector">
            <summary>
            Gets or sets a delegate to select the group description as a 
            function of the parent group and its level.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.ActiveComparer">
            <summary>
            Gets or sets the current IComparer being used
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.Culture">
            <summary>
            Gets the culture to use during sorting.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.IsDataInGroupOrder">
            <summary>
            Gets or sets a value indicating whether the data is in group order
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.AddToSubgroups(System.Object,System.Boolean)">
            <summary>
            Adds specified item to subgroups
            </summary>
            <param name="item">Item to add</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.FindIndex(System.Object,System.Object,System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Finds the index of the specified item
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="seed">Seed of the item we are looking for</param>
            <param name="comparer">Comparer used to find the item</param>
            <param name="low">Low range of item index</param>
            <param name="high">High range of item index</param>
            <returns>Index of the specified item</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.Initialize">
            <summary>
            Initializes the group descriptions
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.InsertSpecialItem(System.Int32,System.Object,System.Boolean)">
            <summary>
            Inserts specified item into the collection
            </summary>
            <param name="index">Index to insert into</param>
            <param name="item">Item to insert</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notify listeners that this View has changed
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should take their filter/sort/grouping
            into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">The NotifyCollectionChangedEventArgs to be passed to the EventHandler</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.OnGroupByChanged">
            <summary>
            Notify host that a group description has changed somewhere in the tree
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object)">
            <summary>
            Remove specified item from subgroups
            </summary>
            <param name="item">Item to remove</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(System.Object)">
            <summary>
            Remove specified item from subgroups using an exhaustive search
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveSpecialItem(System.Int32,System.Object,System.Boolean)">
            <summary>
            Removes specified item into the collection
            </summary>
            <param name="index">Index to remove from</param>
            <param name="item">Item to remove</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.AddToSubgroup(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Object,System.Boolean)">
            <summary>
            Add an item to the subgroup with the given name
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping.</param>
            <param name="name">Name of subgroup to add to</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.AddToSubgroups(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Boolean)">
            <summary>
            Add an item to the desired subgroup(s) of the given group
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.GetGroupDescription(System.Windows.Data.CollectionViewGroup,System.Int32)">
            <summary>
            Returns the description of how to divide the given group into subgroups
            </summary>
            <param name="group">CollectionViewGroup to get group description from</param>
            <param name="level">The level of grouping</param>
            <returns>GroupDescription of how to divide the given group</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.GetGroupName(System.Object,System.ComponentModel.GroupDescription,System.Int32)">
            <summary>
            Get the group name(s) for the given item
            </summary>
            <param name="item">Item to get group name for</param>
            <param name="groupDescription">GroupDescription for the group</param>
            <param name="level">The level of grouping</param>
            <returns>Group names for the specified item</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.InitializeGroup(System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Initialize the given group
            </summary>
            <param name="group">Group to initialize</param>
            <param name="level">The level of grouping</param>
            <param name="seedItem">The seed item to compare with to see where to insert</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromGroupDirectly(System.Windows.Data.CollectionViewGroupInternal,System.Object)">
            <summary>
            Remove an item from the direct children of a group.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
            <returns>True if item could not be removed</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromSubgroup(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Remove an item from the subgroup with the given name.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <param name="name">Name of item to remove</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32)">
            <summary>
            Remove an item from the desired subgroup(s) of the given group.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(System.Windows.Data.CollectionViewGroupInternal,System.Object)">
            <summary>
            The item did not appear in one or more of the subgroups it
            was supposed to.  This can happen if the item's properties
            change so that the group names we used to insert it are
            different from the names used to remove it. If this happens,
            remove the item the hard way.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription">
            <summary>
            TopLevelGroupDescription class
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription.#ctor">
            <summary>
            Initializes a new instance of the TopLevelGroupDescription class.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            We have to implement this abstract method, but it should never be called
            </summary>
            <param name="item">Item to get group name from</param>
            <param name="level">The level of grouping</param>
            <param name="culture">Culture used for sorting</param>
            <returns>We do not return a value here</returns>
        </member>
        <member name="T:System.Windows.Data.PagedCollectionView">
            <summary>
            PagedCollectionView view over an IEnumerable.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.uncancelableCurrentChangingEventArgs">
            <summary>
            Since there's nothing in the un-cancelable event args that is mutable,
            just create one instance to be used universally.
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._cachedPageIndex">
            <summary>
            Value that we cache for the PageIndex if we are in a DeferRefresh,
            and the user has attempted to move to a different page.
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._cachedPageSize">
            <summary>
            Value that we cache for the PageSize if we are in a DeferRefresh,
            and the user has attempted to change the PageSize.
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._culture">
            <summary>
            CultureInfo used in this PagedCollectionView
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._currentChangedMonitor">
            <summary>
            Private accessor for the Monitor we use to prevent recursion
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._currentItem">
            <summary>
            Private accessor for the CurrentItem
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._currentPosition">
            <summary>
            Private accessor for the CurrentPosition
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._deferLevel">
            <summary>
            The number of requests to defer Refresh()
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._editItem">
            <summary>
            The item we are currently editing
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._filter">
            <summary>
            Private accessor for the Filter
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._flags">
            <summary>
            Private accessor for the CollectionViewFlags
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._group">
            <summary>
            Private accessor for the Grouping data
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._internalList">
            <summary>
            Private accessor for the InternalList
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._isGrouping">
            <summary>
            Keeps track of whether groups have been applied to the
            collection already or not. Note that this can still be set
            to false even though we specify a GroupDescription, as the 
            collection may not have gone through the PrepareGroups function.
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._isUsingTemporaryGroup">
            <summary>
            Private accessor for indicating whether we want to point to the temporary grouping data for calculations
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._itemConstructor">
            <summary>
            ConstructorInfo obtained from reflection for generating new items
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._itemConstructorIsValid">
            <summary>
            Whether we have the correct ConstructorInfo information for the ItemConstructor
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._newItem">
            <summary>
            The new item we are getting ready to add to the collection
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._pageIndex">
            <summary>
            Private accessor for the PageIndex
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._pageSize">
            <summary>
            Private accessor for the PageSize
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._pollForChanges">
            <summary>
            Whether the source needs to poll for changes
            (if it did not implement INotifyCollectionChanged)
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._sortDescriptions">
            <summary>
            Private accessor for the SortDescriptions
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._sourceCollection">
            <summary>
            Private accessor for the SourceCollection
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._temporaryGroup">
            <summary>
            Private accessor for the Grouping data on the entire collection
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._timestamp">
            <summary>
            Timestamp used to see if there was a collection change while 
            processing enumerator changes
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView._trackingEnumerator">
            <summary>
            Private accessor for the TrackingEnumerator
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Helper constructor that sets default values for isDataSorted and isDataInGroupOrder.
            </summary>
            <param name="source">The source for the collection</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.#ctor(System.Collections.IEnumerable,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PagedCollectionView class.
            </summary>
            <param name="source">The source for the collection</param>
            <param name="isDataSorted">Determines whether the source is already sorted</param>
            <param name="isDataInGroupOrder">Whether the source is already in the correct order for grouping</param>
        </member>
        <member name="T:System.Windows.Data.PagedCollectionView.RequestPageMoveDelegate">
            <summary>
            Delegate used to asynchronously trigger a page move.
            </summary>
            <param name="pageIndex">Requested page index</param>
        </member>
        <member name="E:System.Windows.Data.PagedCollectionView.CollectionChanged">
            <summary>
            Raise this event when the (filtered) view changes
            </summary>
        </member>
        <member name="E:System.Windows.Data.PagedCollectionView.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            CollectionChanged event (per INotifyCollectionChanged).
            </summary>
        </member>
        <member name="E:System.Windows.Data.PagedCollectionView.CurrentChanged">
            <summary>
            Raised when the CurrentItem property changed
            </summary>
        </member>
        <member name="E:System.Windows.Data.PagedCollectionView.CurrentChanging">
            <summary>
            Raised when the CurrentItem property is changing
            </summary>
        </member>
        <member name="E:System.Windows.Data.PagedCollectionView.PageChanged">
            <summary>
            Raised when a page index change completed
            </summary>
        </member>
        <member name="E:System.Windows.Data.PagedCollectionView.PageChanging">
            <summary>
            Raised when a page index change is requested
            </summary>
        </member>
        <member name="E:System.Windows.Data.PagedCollectionView.PropertyChanged">
            <summary>
            PropertyChanged event.
            </summary>
        </member>
        <member name="E:System.Windows.Data.PagedCollectionView.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per INotifyPropertyChanged)
            </summary>
        </member>
        <member name="T:System.Windows.Data.PagedCollectionView.CollectionViewFlags">
            <summary>
            Enum for CollectionViewFlags
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.IsDataInGroupOrder">
            <summary>
            Whether the list of items (after applying the sort and filters, if any) 
            is already in the correct order for grouping. 
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.IsDataSorted">
            <summary>
            Whether the source collection is already sorted according to the SortDescriptions collection
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.ShouldProcessCollectionChanged">
            <summary>
            Whether we should process the collection changed event
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.IsCurrentBeforeFirst">
            <summary>
            Whether the current item is before the first
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.IsCurrentAfterLast">
            <summary>
            Whether the current item is after the last
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.NeedsRefresh">
            <summary>
            Whether we need to refresh
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.CachedIsEmpty">
            <summary>
            Whether we cache the IsEmpty value
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.IsPageChanging">
            <summary>
            Indicates whether a page index change is in process or not
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.IsMoveToPageDeferred">
            <summary>
            Whether we need to move to another page after EndDefer
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.CollectionViewFlags.IsUpdatePageSizeDeferred">
            <summary>
            Whether we need to update the PageSize after EndDefer
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CanAddNew">
            <summary>
            Gets a value indicating whether the view supports AddNew.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CanCancelEdit">
            <summary>
            Gets a value indicating whether the view supports the notion of "pending changes" 
            on the current edit item.  This may vary, depending on the view and the particular
            item.  For example, a view might return true if the current edit item
            implements IEditableObject, or if the view has special knowledge about 
            the item that it can use to support rollback of pending changes.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CanChangePage">
            <summary>
            Gets a value indicating whether the PageIndex value is allowed to change or not.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CanFilter">
            <summary>
            Gets a value indicating whether we support filtering with this ICollectionView.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CanGroup">
            <summary>
            Gets a value indicating whether this view supports grouping.
            When this returns false, the rest of the interface is ignored.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CanRemove">
            <summary>
            Gets a value indicating whether the view supports Remove and RemoveAt.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CanSort">
            <summary>
            Gets a value indicating whether we support sorting with this ICollectionView.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.Count">
            <summary>
            Gets the number of records in the view after 
            filtering, sorting, and paging.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.Culture">
            <summary>
            Gets or sets Culture to use during sorting.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CurrentAddItem">
            <summary>
            Gets the new item when an AddNew transaction is in progress
            Otherwise it returns null.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CurrentEditItem">
            <summary>
            Gets the affected item when an EditItem transaction is in progress
            Otherwise it returns null.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CurrentItem">
            <summary> 
            Gets the "current item" for this view 
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CurrentPosition">
            <summary>
            Gets the ordinal position of the CurrentItem within the 
            (optionally sorted and filtered) view.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.Filter">
            <summary>
            Gets or sets the Filter, which is a callback set by the consumer of the ICollectionView
            and used by the implementation of the ICollectionView to determine if an
            item is suitable for inclusion in the view.
            </summary>        
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support filtering and will throw a NotSupportedException.
            Use <seealso cref="P:System.Windows.Data.PagedCollectionView.CanFilter"/> property to test if filtering is supported before
            assigning a non-null value.
            </exception>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.Groups">
            <summary>
            Gets the top-level groups, constructed according to the descriptions
            given in GroupDescriptions.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsAddingNew">
            <summary>
            Gets a value indicating whether an "AddNew" transaction is in progress.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsCurrentAfterLast">
            <summary> 
            Gets a value indicating whether currency is beyond the end (End-Of-File). 
            </summary>
            <returns>Whether IsCurrentAfterLast</returns>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsCurrentBeforeFirst">
            <summary> 
            Gets a value indicating whether currency is before the beginning (Beginning-Of-File). 
            </summary>
            <returns>Whether IsCurrentBeforeFirst</returns>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsEditingItem">
            <summary>
            Gets a value indicating whether an EditItem transaction is in progress.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsEmpty">
            <summary>
            Gets a value indicating whether the resulting (filtered) view is empty.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsPageChanging">
            <summary>
            Gets a value indicating whether a page index change is in process or not.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.ItemCount">
            <summary>
            Gets the minimum number of items known to be in the source collection
            that verify the current filter if any
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.NeedsRefresh">
            <summary>
            Gets a value indicating whether this view needs to be refreshed.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.NewItemPlaceholderPosition">
            <summary>
            Gets or sets whether to include a placeholder for a new item, and if so,
            where to put it. Only the value NewItemPlaceholderPosition.None is supported.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.PageIndex">
            <summary>
            Gets the current page we are on. (zero based)
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page. If the
            PageSize = 0, then we are not paging, and will display all items
            in the collection. Otherwise, we will have separate pages for 
            the items to display.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.SortDescriptions">
            <summary>
            Gets the Sort criteria to sort items in collection.
            </summary>
            <remarks>
            <p>
            Clear a sort criteria by assigning SortDescription.Empty to this property.
            One or more sort criteria in form of <seealso cref="T:System.ComponentModel.SortDescription"/>
            can be used, each specifying a property and direction to sort by.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support sorting and will throw a NotSupportedException.
            Use <seealso cref="P:System.Windows.Data.PagedCollectionView.CanSort"/> property to test if sorting is supported before adding
            to SortDescriptions.
            </exception>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.SourceCollection">
            <summary>
            Gets the source of the IEnumerable collection we are using for our view.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.CanConstructItem">
            <summary>
            Gets a value indicating whether we have a valid ItemConstructor of the correct type
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.InternalCount">
            <summary>
            Gets the private count without taking paging or
            placeholders into account
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.InternalList">
            <summary>
            Gets the InternalList
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsCurrentInSync">
            <summary>
            Gets a value indicating whether CurrentItem and CurrentPosition are
            up-to-date with the state and content of the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsCurrentInView">
            <summary>
            Gets a value indicating whether the current item is in the view
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsGrouping">
            <summary>
            Gets a value indicating whether or not we have grouping 
            taking place in this collection.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.IsRefreshDeferred">
            <summary>
            Gets a value indicating whether there
            is still an outstanding DeferRefresh in
            use.  If at all possible, derived classes
            should not call Refresh if IsRefreshDeferred
            is true.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.NeedToMoveToPreviousPage">
            <summary>
            Gets whether the current page is empty and we need
            to move to a previous page.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.OnLastLocalPage">
            <summary>
            Gets a value indicating whether we are on the last local page
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.PageCount">
            <summary>
            Gets the number of pages we currently have
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.RootGroup">
            <summary>
            Gets the root of the Group that we expose to the user
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.SourceList">
            <summary>
            Gets the SourceCollection as an IList
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.Timestamp">
            <summary>
            Gets Timestamp used by the NewItemAwareEnumerator to determine if a
            collection change has occurred since the enumerator began.  (If so,
            MoveNext should throw.)
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.UsesLocalArray">
            <summary>
            Gets a value indicating whether a private copy of the data 
            is needed for sorting, filtering, and paging. We want any deriving 
            classes to also be able to access this value to see whether or not 
            to use the default source collection, or the internal list.
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.Item(System.Int32)">
            <summary>
            Return the item at the specified index
            </summary>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.AddNew">
            <summary>
            Add a new item to the underlying collection.  Returns the new item.
            After calling AddNew and changing the new item as desired, either
            CommitNew or CancelNew" should be called to complete the transaction.
            </summary>
            <returns>The new item we are adding</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.CancelEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.Windows.Data.PagedCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are discarded.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.CancelNew">
            <summary>
            Complete the transaction started by AddNew. The new
            item is removed from the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.CommitEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.Windows.Data.PagedCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are committed.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.CommitNew">
            <summary>
            Complete the transaction started by AddNew. We follow the WPF
            convention in that the view's sort, filter, and paging
            specifications (if any) are applied to the new item.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.Contains(System.Object)">
            <summary>
            Return true if the item belongs to this view.  No assumptions are
            made about the item. This method will behave similarly to IList.Contains().
            If the caller knows that the item belongs to the
            underlying collection, it is more efficient to call PassesFilter.
            </summary>
            <param name="item">The item we are checking to see whether it is within the collection</param>
            <returns>Boolean value of whether or not the collection contains the item</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.DeferRefresh">
            <summary>
            Enter a Defer Cycle.
            Defer cycles are used to coalesce changes to the ICollectionView.
            </summary>
            <returns>IDisposable used to notify that we no longer need to defer, when we dispose</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.EditItem(System.Object)">
            <summary>
            Begins an editing transaction on the given item.  The transaction is
            completed by calling either CommitEdit or CancelEdit.  Any changes made 
            to the item during the transaction are considered "pending", provided 
            that the view supports the notion of "pending changes" for the given item.
            </summary>
            <param name="item">Item we want to edit</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.GetEnumerator">
            <summary> 
            Implementation of IEnumerable.GetEnumerator().
            This provides a way to enumerate the members of the collection
            without changing the currency.
            </summary>
            <returns>IEnumerator for the collection</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Interface Implementation for GetEnumerator()
            </summary>
            <returns>IEnumerator that we get from our internal collection</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.GetItemAt(System.Int32)">
            <summary>
            Retrieve item at the given zero-based index in this PagedCollectionView, after the source collection
            is filtered, sorted, and paged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if index is out of range
            </exception>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>Item at specified index</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.IndexOf(System.Object)">
            <summary> 
            Return the index where the given item appears, or -1 if doesn't appear.
            </summary>
            <param name="item">Item we are searching for</param>
            <returns>Index of specified item</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveCurrentTo(System.Object)">
            <summary> 
            Move to the given item. 
            </summary>
            <param name="item">Item we want to move the currency to</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveCurrentToFirst">
            <summary> 
            Move to the first item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveCurrentToLast">
            <summary> 
            Move to the last item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveCurrentToNext">
            <summary> 
            Move to the next item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveCurrentToPosition(System.Int32)">
            <summary>
            Move CurrentItem to this index
            </summary>
            <param name="position">Position we want to move the currency to</param>
            <returns>True if the resulting CurrentItem is an item within the view; otherwise False</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveCurrentToPrevious">
            <summary> 
            Move to the previous item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            The move is only attempted when TotalItemCount is known.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveToNextPage">
            <summary>
            Moves to the page after the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveToPage(System.Int32)">
            <summary>
            Requests a page move to page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">Index of the target page</param>
            <returns>Whether or not the move was successfully initiated.</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.PassesFilter(System.Object)">
            <summary>
            Return true if the item belongs to this view.  The item is assumed to belong to the
            underlying DataCollection;  this method merely takes filters into account.
            It is commonly used during collection-changed notifications to determine if the added/removed
            item requires processing.
            Returns true if no filter is set on collection view.
            </summary>
            <param name="item">The item to compare against the Filter</param>
            <returns>Whether the item passes the filter</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.Refresh">
            <summary>
            Re-create the view, using any SortDescriptions and/or Filters.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.Remove(System.Object)">
            <summary>
            Remove the given item from the underlying collection. It
            needs to be in the current filtered, sorted, and paged view
            to call this.
            </summary>
            <param name="item">Item we want to remove</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the given index from the underlying collection.
            The index is interpreted with respect to the view (filtered, sorted,
            and paged list).
            </summary>
            <param name="index">Index of the item we want to remove</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.InvokePath(System.Object,System.String,System.Type)">
            <summary>
            Helper for SortList to handle nested properties (e.g. Address.Street)
            </summary>
            <param name="item">parent object</param>
            <param name="propertyPath">property names path</param>
            <param name="propertyType">property type that we want to check for</param>
            <returns>child object</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.AdjustCurrencyForAdd(System.Object,System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            </summary>
            <param name="newCurrentItem">Item that we want to set currency to</param>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.AdjustCurrencyForEdit(System.Object,System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            </summary>
            <param name="newCurrentItem">Item that we want to set currency to</param>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.AdjustCurrencyForRemove(System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            The index can be -1 if the item was removed from a previous page
            </summary>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.CheckFlag(System.Windows.Data.PagedCollectionView.CollectionViewFlags)">
            <summary>
            Returns true if specified flag in flags is set.
            </summary>
            <param name="flags">Flag we are checking for</param>
            <returns>Whether the specified flag is set</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.CompletePageMove(System.Int32)">
            <summary>
            Called to complete the page move operation to set the
            current page index.
            </summary>
            <param name="pageIndex">Final page index</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.ConvertToInternalIndex(System.Int32)">
            <summary>
            Convert a value for the index passed in to the index it would be
            relative to the InternalIndex property.
            </summary>
            <param name="index">Index to convert</param>
            <returns>Value for the InternalIndex</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.CopySourceToInternalList">
            <summary>
            Copy all items from the source collection to the internal list for processing.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.EndAddNew(System.Boolean)">
            <summary>
            Common functionality used by CommitNew, CancelNew, and when the
            new item is removed by Remove or Refresh.
            </summary>
            <param name="cancel">Whether we canceled the add</param>
            <returns>The new item we ended adding</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.EndDefer">
            <summary>
            Subtracts from the deferLevel counter and calls Refresh() if there are no other defers
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.EnsureItemConstructor">
            <summary>
            Makes sure that the ItemConstructor is set for the correct type
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.EnsureCollectionInSync">
            <summary>
             If the IEnumerable has changed, bring the collection up to date.
             (This isn't necessary if the IEnumerable is also INotifyCollectionChanged
             because we keep the collection in sync incrementally.)
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.GetItemType(System.Boolean)">
            <summary>
            Helper function used to determine the type of an item
            </summary>
            <param name="useRepresentativeItem">Whether we should use a representative item</param>
            <returns>The type of the items in the collection</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.GetRepresentativeItem">
            <summary>
            Gets a representative item from the collection
            </summary>
            <returns>An item that can represent the collection</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.InternalIndexOf(System.Object)">
            <summary>
            Return index of item in the internal list.
            </summary>
            <param name="item">The item we are checking</param>
            <returns>Integer value on where in the InternalList the object is located</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.InternalItemAt(System.Int32)">
            <summary>
            Return item at the given index in the internal list.
            </summary>
            <param name="index">The index we are checking</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.OkToChangeCurrent">
            <summary>
            Ask listeners (via ICollectionView.CurrentChanging event) if it's OK to change currency
            </summary>
            <returns>False if a listener cancels the change, True otherwise</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Notify listeners that this View has changed
            </summary>
            <remarks>
                CollectionViews (and sub-classes) should take their filter/sort/grouping/paging
                into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">
                The NotifyCollectionChangedEventArgs to be passed to the EventHandler
            </param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.OnCurrentChanged">
            <summary>
            Raises the CurrentChanged event
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.OnCurrentChanging">
            <summary>
            Raise a CurrentChanging event that is not cancelable.
            This is called by CollectionChanges (Add, Remove, and Refresh) that 
            affect the CurrentItem.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.OnCurrentChanging(System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Raises the CurrentChanging event
            </summary>
            <param name="args">
                CancelEventArgs used by the consumer of the event.  args.Cancel will
                be true after this call if the CurrentItem should not be changed for
                any reason.
            </param>
            <exception cref="T:System.InvalidOperationException">
                This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.OnGroupByChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            GroupBy changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupBy has changed</param>
            <param name="e">Arguments for the NotifyCollectionChanged event</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.OnGroupDescriptionChanged(System.Object,System.EventArgs)">
            <summary>
            GroupDescription changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupDescription has changed</param>
            <param name="e">Arguments for the GroupDescriptionChanged event</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="e">PropertyChangedEventArgs for this change</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.OnPropertyChanged(System.String)">
            <summary>
            Helper to raise a PropertyChanged event.
            </summary>
            <param name="propertyName">Property name for the property that changed</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.PrepareGroupingComparer(System.Windows.Data.CollectionViewGroupRoot)">
            <summary>
            Sets up the ActiveComparer for the CollectionViewGroupRoot specified
            </summary>
            <param name="groupRoot">The CollectionViewGroupRoot</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.PrepareGroups">
            <summary>
            Use the GroupDescriptions to place items into their respective groups.
            This assumes that there is no paging, so we just group the entire collection
            of items that the CollectionView holds.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.PrepareTemporaryGroups">
            <summary>
            Use the GroupDescriptions to place items into their respective groups.
            Because of the fact that we have paging, it is possible that we are only
            going to need a subset of the items to be displayed. However, before we 
            actually group the entire collection, we can't display the items in the
            correct order. We therefore want to just create a temporary group with
            the entire collection, and then using this data we can create the group
            that is exposed with just the items we need.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.PrepareGroupsForCurrentPage">
            <summary>
            Update our Groups private accessor to point to the subset of data
            covered by the current page, or to display the entire group if paging is not
            being used.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.PrepareLocalArray(System.Collections.IEnumerable)">
            <summary>
            Create, filter and sort the local index array.
            called from Refresh(), override in derived classes as needed.
            </summary>
            <param name="enumerable">new IEnumerable to associate this view with</param>
            <returns>new local array to use for this view</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.ProcessAddEvent(System.Object,System.Int32)">
            <summary>
            Process an Add operation from an INotifyCollectionChanged event handler.
            </summary>
            <param name="addedItem">Item added to the source collection</param>
            <param name="addIndex">Index item was added into</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.ProcessCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Process CollectionChanged event on source collection 
            that implements INotifyCollectionChanged.
            </summary>
            <param name="args">
            The NotifyCollectionChangedEventArgs to be processed.
            </param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.ProcessRemoveEvent(System.Object,System.Boolean)">
            <summary>
            Process a Remove operation from an INotifyCollectionChanged event handler.
            </summary>
            <param name="removedItem">Item removed from the source collection</param>
            <param name="isReplace">Whether this was part of a Replace operation</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.ProcessInsertToCollection(System.Object,System.Int32)">
            <summary>
            Handles adding an item into the collection, and applying sorting, filtering, grouping, paging.
            </summary>
            <param name="item">Item to insert in the collection</param>
            <param name="index">Index to insert item into</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.RaiseCurrencyChanges(System.Boolean,System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Raises Currency Change events
            </summary>
            <param name="fireChangedEvent">Whether to fire the CurrentChanged event even if the parameters have not changed</param>
            <param name="oldCurrentItem">CurrentItem before processing changes</param>
            <param name="oldCurrentPosition">CurrentPosition before processing changes</param>
            <param name="oldIsCurrentBeforeFirst">IsCurrentBeforeFirst before processing changes</param>
            <param name="oldIsCurrentAfterLast">IsCurrentAfterLast before processing changes</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.RaisePageChanged">
            <summary>
            Raises the PageChanged event
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.RaisePageChanging(System.Int32)">
            <summary>
            Raises the PageChanging event
            </summary>
            <param name="newPageIndex">Index of the requested page</param>
            <returns>True if the event is cancelled (e.Cancel was set to True), False otherwise</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.RefreshInternal">
            <summary>
            Will call RefreshOverride and clear the NeedsRefresh flag
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.RefreshOrDefer">
            <summary>
            Refresh, or mark that refresh is needed when defer cycle completes.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.RefreshOverride">
            <summary>
            Re-create the view, using any SortDescriptions. 
            Also updates currency information.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.ResetCurrencyValues(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Set currency back to the previous value it had if possible. If the item is no longer in view
            then either use the first item in the view, or if the list is empty, use null.
            </summary>
            <param name="oldCurrentItem">CurrentItem before processing changes</param>
            <param name="oldIsCurrentBeforeFirst">IsCurrentBeforeFirst before processing changes</param>
            <param name="oldIsCurrentAfterLast">IsCurrentAfterLast before processing changes</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SetCurrent(System.Object,System.Int32)">
            <summary>
            Set CurrentItem and CurrentPosition, no questions asked!
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should use this method to update
            the Current values.
            </remarks>
            <param name="newItem">New CurrentItem</param>
            <param name="newPosition">New CurrentPosition</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SetCurrent(System.Object,System.Int32,System.Int32)">
            <summary>
            Set CurrentItem and CurrentPosition, no questions asked!
            </summary>
            <remarks>
            This method can be called from a constructor - it does not call
            any virtuals.  The 'count' parameter is substitute for the real Count,
            used only when newItem is null.
            In that case, this method sets IsCurrentAfterLast to true if and only
            if newPosition >= count.  This distinguishes between a null belonging
            to the view and the dummy null when CurrentPosition is past the end.
            </remarks>
            <param name="newItem">New CurrentItem</param>
            <param name="newPosition">New CurrentPosition</param>
            <param name="count">Numbers of items in the collection</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SetCurrentToPosition(System.Int32)">
            <summary>
            Just move it. No argument check, no events, just move current to position.
            </summary>
            <param name="position">Position to move the current item to</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SetFlag(System.Windows.Data.PagedCollectionView.CollectionViewFlags,System.Boolean)">
            <summary>
            Sets the specified Flag(s)
            </summary>
            <param name="flags">Flags we want to set</param>
            <param name="value">Value we want to set these flags to</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SetSortDescriptions(System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Set new SortDescription collection; re-hook collection change notification handler
            </summary>
            <param name="descriptions">SortDescriptionCollection to set the property value to</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SortDescriptionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            SortDescription was added/removed, refresh PagedCollectionView
            </summary>
            <param name="sender">Sender that triggered this handler</param>
            <param name="e">NotifyCollectionChangedEventArgs for this change</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SortList(System.Collections.Generic.List{System.Object})">
            <summary>
            Sort the List based on the SortDescriptions property.
            </summary>
            <param name="list">List of objects to sort</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.VerifyRefreshNotDeferred">
            <summary>
            Helper to validate that we are not in the middle of a DeferRefresh
            and throw if that is the case.
            </summary>
        </member>
        <member name="T:System.Windows.Data.PagedCollectionView.DeferHelper">
            <summary>
            Used to keep track of Defer calls on the PagedCollectionView, which
            will prevent the user from calling Refresh() on the view. In order
            to allow refreshes again, the user will have to call IDisposable.Dispose,
            to end the Defer operation.
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.DeferHelper.collectionView">
            <summary>
            Private reference to the CollectionView that created this DeferHelper
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.DeferHelper.#ctor(System.Windows.Data.PagedCollectionView)">
            <summary>
            Initializes a new instance of the DeferHelper class
            </summary>
            <param name="collectionView">CollectionView that created this DeferHelper</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.DeferHelper.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="T:System.Windows.Data.PagedCollectionView.SimpleMonitor">
            <summary>
            A simple monitor class to help prevent re-entrant calls
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.SimpleMonitor.entered">
            <summary>
            Whether the monitor is entered
            </summary>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.SimpleMonitor.Busy">
            <summary>
            Gets a value indicating whether we have been entered or not
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SimpleMonitor.Enter">
            <summary>
            Sets a value indicating that we have been entered
            </summary>
            <returns>Boolean value indicating whether we were already entered</returns>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SimpleMonitor.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="T:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator">
            <summary>
            IEnumerator generated using the new item taken into account
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Position.BeforeNewItem">
            <summary>
            Whether the position is before the new item
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Position.OnNewItem">
            <summary>
            Whether the position is on the new item that is being created
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Position.AfterNewItem">
            <summary>
            Whether the position is after the new item
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.#ctor(System.Windows.Data.PagedCollectionView,System.Collections.IEnumerator,System.Object)">
            <summary>
            Initializes a new instance of the NewItemAwareEnumerator class.
            </summary>
            <param name="collectionView">The PagedCollectionView we are creating the enumerator for</param>
            <param name="baseEnumerator">The baseEnumerator that we pass in</param>
            <param name="newItem">The new item we are adding to the collection</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.MoveNext">
            <summary>
            Implements the MoveNext function for IEnumerable
            </summary>
            <returns>Whether we can move to the next item</returns>
        </member>
        <member name="P:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Current">
            <summary>
            Gets the Current value for IEnumerable
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Reset">
            <summary>
            Implements the Reset function for IEnumerable
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._collectionView">
            <summary>
            CollectionView that we are creating the enumerator for
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._baseEnumerator">
            <summary>
            The Base Enumerator that we are passing in
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._position">
            <summary>
            The position we are appending items to the enumerator
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._newItem">
            <summary>
            Reference to any new item that we want to add to the collection
            </summary>
        </member>
        <member name="F:System.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._timestamp">
            <summary>
            Timestamp to let us know whether there have been updates to the collection
            </summary>
        </member>
        <member name="T:System.Windows.Data.PagedCollectionView.SortFieldComparer">
            <summary>
            IComparer class to sort by class property value (using reflection).
            </summary>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SortFieldComparer.#ctor(System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Create a comparer, using the SortDescription and a Type;
            tries to find a reflection PropertyInfo for each property name
            </summary>
            <param name="sortFields">list of property names and direction to sort by</param>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SortFieldComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="x">first item to compare</param>
            <param name="y">second item to compare</param>
            <returns>Negative number if x is less than y, zero if equal, and a positive number if x is greater than y</returns>
            <remarks>
            Compares the 2 items using the list of property names and directions.
            </remarks>
        </member>
        <member name="M:System.Windows.Data.PagedCollectionView.SortFieldComparer.FindInsertIndex(System.Object,System.Collections.IList)">
            <summary>
            Steps through the given list using the comparer to find where
            to insert the specified item to maintain sorted order
            </summary>
            <param name="x">Item to insert into the list</param>
            <param name="list">List where we want to insert the item</param>
            <returns>Index where we should insert into</returns>
        </member>
        <member name="T:System.Windows.Data.GroupDescriptionSelectorCallback">
            <summary>
            Represents a method that is used to provide custom logic to select 
            the GroupDescription based on the parent group and its level. 
            </summary>
            <param name="group">The parent group.</param>
            <param name="level">The level of group.</param>
            <returns>The GroupDescription chosen based on the parent group and its level.</returns>
        </member>
        <member name="T:System.Windows.Data.PropertyGroupDescription">
            <summary>
            Describes the grouping of items using a property name as the criteria. 
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Data.PropertyGroupDescription._cachedType">
            <summary>
            Cached Type that we store when we are looking for a property value
            </summary>
        </member>
        <member name="F:System.Windows.Data.PropertyGroupDescription._converter">
            <summary>
            Private accessor for the Converter
            </summary>
        </member>
        <member name="F:System.Windows.Data.PropertyGroupDescription._propertyName">
            <summary>
            Private accessor for the PropertyName
            </summary>
        </member>
        <member name="F:System.Windows.Data.PropertyGroupDescription._stringComparison">
            <summary>
            Private accessor for the StringComparison
            </summary>
        </member>
        <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor">
            <summary>
            Initializes a new instance of the PropertyGroupDescription class.
            </summary>
        </member>
        <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PropertyGroupDescription class.
            </summary>
            <param name="propertyName">Property name that we want to group by</param>
        </member>
        <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor(System.String,System.Windows.Data.IValueConverter)">
            <summary>
            Initializes a new instance of the PropertyGroupDescription class.
            </summary>
            <param name="propertyName">Property name that we want to group by</param>
            <param name="converter">Converter applied to the property value before determining the group name</param>
        </member>
        <member name="M:System.Windows.Data.PropertyGroupDescription.#ctor(System.String,System.Windows.Data.IValueConverter,System.StringComparison)">
            <summary>
            Initializes a new instance of the PropertyGroupDescription class.
            </summary>
            <param name="propertyName">Property name that we want to group by</param>
            <param name="converter">Converter applied to the property value before determining the group name</param>
            <param name="stringComparison">The type of string comparison to use</param>
        </member>
        <member name="P:System.Windows.Data.PropertyGroupDescription.Converter">
            <summary>
            Gets or sets a converter to apply to the property value or the item to 
            produce the final value that is used to determine which group(s) an 
            item belongs to. 
            </summary>
        </member>
        <member name="P:System.Windows.Data.PropertyGroupDescription.PropertyName">
            <summary>
            Gets or sets the name of the property that is used to determine which 
            group(s) an item belongs to. 
            </summary>
        </member>
        <member name="P:System.Windows.Data.PropertyGroupDescription.StringComparison">
            <summary>
            Gets or sets a StringComparison value that specifies the comparison 
            between the value of an item (as determined by PropertyName and Converter) 
            and the name of a group. 
            </summary>
        </member>
        <member name="M:System.Windows.Data.PropertyGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Returns the group name(s) for the given item
            </summary>
            <param name="item">The item to return group names for</param>
            <param name="level">The level of grouping</param>
            <param name="culture">The CultureInfo to supply to the converter</param>
            <returns>The group name(s) for the given item</returns>
        </member>
        <member name="M:System.Windows.Data.PropertyGroupDescription.NamesMatch(System.Object,System.Object)">
            <summary>
            Returns a value that indicates whether the group name and 
            the item name match so that the item belongs to the group.
            </summary>
            <param name="groupName">The name of the group to check</param>
            <param name="itemName">The name of the item to check</param>
            <returns>true if the names match and the item belongs to the group; otherwise, false</returns>
        </member>
        <member name="T:System.Windows.Common.TypeHelper">
            <summary>
            Utility class for Type related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyType(System.Type,System.String)">
            <summary>
            Extension method that returns the type of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="parentType">Type that exposes that property</param>
            <param name="propertyPath">Property path</param>
            <returns>Property type</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Type,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="propertyType">Property type</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetTypeName(System.Type)">
            <summary>
            Returns the friendly name for a type
            </summary>
            <param name="type">The type to get the name from</param>
            <returns>Textual representation of the input type</returns>
        </member>
        <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
            <summary>
            Describes the desired position of the new item placeholder in an
            <seealso cref="T:System.ComponentModel.IEditableCollectionView"/>.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
            <summary> Do not include a placeholder. </summary>
        </member>
        <member name="T:System.ComponentModel.IEditableCollectionView">
            <summary>
            IEditableCollectionView is an interface that a collection view
            can implement to enable editing-related functionality.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
            <summary>
            Gets or sets whether to include a placeholder for a new item, and if so,
            where to put it.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
            <summary>
            Gets a value indicating whether the view supports <seealso cref="M:System.ComponentModel.IEditableCollectionView.AddNew"/>.
            </summary>
        </member>
        <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
            <summary>
            Add a new item to the underlying collection.  Returns the new item.
            After calling AddNew and changing the new item as desired, either
            <seealso cref="M:System.ComponentModel.IEditableCollectionView.CommitNew"/> or <seealso cref="M:System.ComponentModel.IEditableCollectionView.CancelNew"/> should be
            called to complete the transaction.
            </summary>
            <returns>
            The new item that gets created
            </returns>
        </member>
        <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
            <summary>
            Complete the transaction started by <seealso cref="M:System.ComponentModel.IEditableCollectionView.AddNew"/>.  The new
            item remains in the collection, and the view's sort, filter, and grouping
            specifications (if any) are applied to the new item.
            </summary>
        </member>
        <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
            <summary>
            Complete the transaction started by <seealso cref="M:System.ComponentModel.IEditableCollectionView.AddNew"/>.  The new
            item is removed from the collection.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
            <summary>
            Gets a value indicating whether an <seealso cref="M:System.ComponentModel.IEditableCollectionView.AddNew"/> transaction is in progress.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
            <summary>
            Gets the new item when an <seealso cref="M:System.ComponentModel.IEditableCollectionView.AddNew"/> transaction is in progress.
            Otherwise it returns null.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
            <summary>
            Gets a value indicating whether the view supports <seealso cref="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)"/> and
            <seealso cref="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the given index from the underlying collection.
            The index is interpreted with respect to the view (not with respect to
            the underlying collection).
            </summary>
            <param name="index">Index of item to remove</param>
        </member>
        <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
            <summary>
            Remove the given item from the underlying collection.
            </summary>
            <param name="item">Object we want to remove</param>
        </member>
        <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
            <summary>
            Begins an editing transaction on the given item.  The transaction is
            completed by calling either <seealso cref="M:System.ComponentModel.IEditableCollectionView.CommitEdit"/> or
            <seealso cref="M:System.ComponentModel.IEditableCollectionView.CancelEdit"/>.  Any changes made to the item during
            the transaction are considered "pending", provided that the view supports
            the notion of "pending changes" for the given item.
            </summary>
            <param name="item">Object we want to edit</param>
        </member>
        <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are committed.
            </summary>
        </member>
        <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are discarded.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
            <summary>
            Gets a value indicating whether the view supports the notion 
            of "pending changes" on the current edit item.  This may vary, depending 
            on the view and the particular item.  For example, a view might return 
            true if the current edit item implements IEditableObject, or if the view has 
            special knowledge about the item that it can use to support rollback of 
            pending changes.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
            <summary>
            Gets a value indicating whether an <seealso cref="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)"/> transaction is in progress.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
            <summary>
            Gets the affected item when an <seealso cref="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)"/> transaction is in progress.
            Otherwise it returns null.
            </summary>
        </member>
        <member name="T:System.ComponentModel.IPagedCollectionView">
            <summary>
            Interface used to drive paging of collection views.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="E:System.ComponentModel.IPagedCollectionView.PageChanged">
            <summary>
            Raised when a page index change completed.
            </summary>
        </member>
        <member name="E:System.ComponentModel.IPagedCollectionView.PageChanging">
            <summary>
            Raised when a page index change is requested.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IPagedCollectionView.CanChangePage">
            <summary>
            Gets a value indicating whether the PageIndex value is allowed to change or not.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IPagedCollectionView.IsPageChanging">
            <summary>
            Gets a value indicating whether a page index change is in process or not.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IPagedCollectionView.ItemCount">
            <summary>
            Gets the number of known items in the view before paging is applied.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IPagedCollectionView.PageIndex">
            <summary>
            Gets the current page we are on. (zero based)
            </summary>
        </member>
        <member name="P:System.ComponentModel.IPagedCollectionView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page.
            </summary>
        </member>
        <member name="P:System.ComponentModel.IPagedCollectionView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied,
            or -1 if that total number is unknown.
            </summary>
        </member>
        <member name="M:System.ComponentModel.IPagedCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.ComponentModel.IPagedCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.ComponentModel.IPagedCollectionView.MoveToNextPage">
            <summary>
            Moves to the page after the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.ComponentModel.IPagedCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.ComponentModel.IPagedCollectionView.MoveToPage(System.Int32)">
            <summary>
            Moves to page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">The index of the page to which to move.</param>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="T:System.ComponentModel.PageChangingEventArgs">
            <summary>
            Event argument used for page index change notifications. The requested page move
            can be canceled by setting e.Cancel to True.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.ComponentModel.PageChangingEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor that takes the target page index
            </summary>
            <param name="newPageIndex">Index of the requested page</param>
        </member>
        <member name="P:System.ComponentModel.PageChangingEventArgs.NewPageIndex">
            <summary>
            Gets the index of the requested page
            </summary>
        </member>
        <member name="T:System.ComponentModel.PagedCollectionViewResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.CancelEditNotSupported">
            <summary>
              Looks up a localized string similar to CancelEdit is not supported for the current edit item..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.CannotFilter">
            <summary>
              Looks up a localized string similar to The Filter property cannot be set when the CanFilter property returns false..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.ChangingPageSizeNotAllowedDuringAddOrEdit">
            <summary>
              Looks up a localized string similar to Changing the PageSize is not allowed during an AddNew or EditItem transaction..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.EnumeratorVersionChanged">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation cannot execute..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.InvalidPageSize">
            <summary>
              Looks up a localized string similar to PageSize cannot have a negative value..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.NoCheckOrChangeWhenDeferred">
            <summary>
              Looks up a localized string similar to Cannot change or check the contents or current position of the PagedCollectionView while Refresh is being deferred..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.OperationNotAllowedDuringAddOrEdit">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed during an AddNew or EditItem transaction..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.OperationNotAllowedDuringTransaction">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed during a transaction started by &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.OperationNotAllowedForView">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed for this view..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.PropertyNotReadable">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; on type &apos;{1}&apos; cannot be read..
            </summary>
        </member>
        <member name="P:System.ComponentModel.PagedCollectionViewResources.RemoveNotSupported">
            <summary>
              Looks up a localized string similar to Remove/RemoveAt is not supported..
            </summary>
        </member>
    </members>
</doc>
